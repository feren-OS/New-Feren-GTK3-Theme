// Drawing mixins

// generic drawing of more complex things

@function _widget_edge($c:$borders_edge) {
// outer highlight "used" on most widgets
  @if $c == none { @return none; }
  @else { @return 0 1px $c; }
}

@mixin _shadows($list...) {
//
// Helper mixin to stack up to box-shadows;
//
  $shadows: null;

  @each $shadow in $list {
    @if $shadow!=none { $shadows: $shadows, $shadow; }
  }

  box-shadow: $shadows;
}

// entries
@function entry_focus_border($fc:gtk("@theme_selected_bg_color")) {
  @return $fc;
}

@function entry_focus_shadow($fc:gtk("@theme_selected_bg_color")) { @return inset 0 0 0 1px $fc; }

@mixin entry($t, $fc:gtk("@theme_selected_bg_color"), $edge: none) {
//
// Entries drawing function
//
// $t: entry type
// $fc: focus color
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, focus, insensitive, backdrop, backdrop-insensitive, osd, osd-focus, osd-backdrop;
//

  $_blank_edge: if($edge == none, none, 0 1px transparentize($edge, 1));
  $_entry_edge: if($edge == none, none, _widget_edge($edge));

  @if $t==normal {
    color: gtk("@theme_text_color");
    border-color: gtkbreezent("@ferengtk_border_generic");
    background-color: gtk("@theme_base_color");
    @include _shadows(entry_focus_shadow(gtkalpha($fc, 0)), $_entry_edge);
    // for the transition to work the number of shadows in different states needs to match, hence the transparent shadow here.
  }
  @if $t==focus {
    @include _shadows(entry_focus_shadow($fc), $_entry_edge);
    border-color: entry_focus_border($fc);
  }
  @if $t==insensitive {
    color: gtk("@insensitive_fg_color");
    border-color: gtkbreezent("@ferengtk_border_generic");
    background-color: gtk("@insensitive_bg_color");
    box-shadow: $_entry_edge;
  }
  @if $t==backdrop {
    color: gtk("@theme_unfocused_text_color");
    border-color: gtkalpha(gtkbreezent("@ferengtk_border_generic"), 0.7);
    background-color: gtk("@theme_unfocused_base_color");
    box-shadow: $_blank_edge;
  }
  @if $t==backdrop-insensitive {
    color: gtk("@insensitive_unfocused_fg_color");
    border-color: gtkalpha(gtkbreezent("@ferengtk_border_generic"), 0.7);
    background-color: gtk("@insensitive_bg_color");
    box-shadow: $_blank_edge;
  }
  @if $t==osd {
    color: gtk("@theme_text_color");
    border-color: gtkbreezent("@ferengtk_border_generic");
    background-color: gtk("@theme_base_color");
    background-clip: padding-box;
    box-shadow: none;
    //text-shadow: 0 1px black;
    //-gtk-icon-shadow: 0 1px black;
  }
  @if $t==osd-focus {
    color: gtk("@theme_text_color");
    border-color: gtk("@theme_selected_bg_color");
    background-color: gtk("@theme_base_color");
    background-clip: padding-box;
    box-shadow: entry_focus_shadow($fc);
    //text-shadow: 0 1px black;
    //-gtk-icon-shadow: 0 1px black;
  }
  @if $t==osd-insensitive {
    color: gtk("@insensitive_fg_color");
    border-color: gtkbreezent("@ferengtk_border_generic");
    background-color: gtk("@insensitive_bg_color");
    background-clip: padding-box;
    box-shadow: none;
    //text-shadow: none;
    //-gtk-icon-shadow: none;
  }
  @if $t==osd-backdrop {
    color: gtk("@theme_text_color");
    border-color: gtkbreezent("@ferengtk_border_generic");
    background-color: gtk("@theme_base_color");
    background-clip: padding-box;
    box-shadow: none;
    //text-shadow: none;
    //-gtk-icon-shadow: none;
  }
}

// buttons

@function _border_color($c, $darker: false) {
  @return $c;
}

//@function _text_shadow_color ($tc: gtk("@theme_fg_color"), $bg: gtk("@theme_button_background_normal")) {
////
//// calculate the color of text shadows
////
//// $tc is the text color
//// $bg is the background color
////
  //$_lbg: lightness($bg)/100%;
  //@if lightness($tc)<50% { @return transparentize(white, 1-$_lbg/($_lbg*1.3)); }
  //@else { @return transparentize(black, $_lbg*0.8); }
//}

//@function _button_hilight_color($c) {
////
//// calculate the right top hilight color for buttons
////
//// $c: base color;
////
  //@if lightness($c)>95% { @return white; }
  //@else if lightness($c)>90% { @return transparentize(white, 0.2); }
  //@else if lightness($c)>80% { @return transparentize(white, 0.5); }
  //@else if lightness($c)>50% { @return transparentize(white, 0.8); }
  //@else if lightness($c)>40% { @return transparentize(white, 0.9); }
  //@else { @return transparentize(white, 0.98); }
//}

//@mixin _button_text_shadow ($tc:gtk("@theme_fg_color"), $bg:gtk("@theme_button_background_normal")) {
////
//// helper function for the text emboss effect
////
//// $tc is the optional text color, not the shadow color
////
//// TODO: this functions needs a way to deal with special cases
////

  //$_shadow: _text_shadow_color($tc, $bg);

  //@if lightness($tc)<50% {
    //text-shadow: 0 1px $_shadow;
    //-gtk-icon-shadow: 0 1px $_shadow;
  //}
  //@else {
    //text-shadow: 0 -1px $_shadow;
    //-gtk-icon-shadow: 0 -1px $_shadow;
  //}
//}

@mixin button($t, $c:gtk("@theme_button_background_normal"), $tc:gtk("@theme_button_foreground_normal"), $edge: none) {
//
// Button drawing function
//
// $t:    button type,
// $c:    base button color for colored* types
// $tc:   optional text color for colored* types
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, hover, active, insensitive, insensitive-active,
// backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
// osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
//
// This mixin sets the $button_fill global variable which containts the button background-image
//
  $_button_edge: if($edge == none, none, _widget_edge($edge));
  $_blank_edge: if($edge == none, none, _widget_edge(transparentize($edge,1)));
  $_button_shadow: 0 1px 1px rgba(0,0,0,0.1);

  @if $t==normal {
  //
  // normal button
  //
    label, & { color: $tc; }
    color: $tc;
    border: 1px solid gtkmix($c, black, 0.16);
    background: linear-gradient(to bottom, gtkmix($c, white, 0.04), $c);
  }

  @else if $t==hover {
  //
  // hovered button
  //
    label, & { color: $tc; }
    color: $tc;
    border: 1px solid gtkmix($c, black, 0.16);
    background: linear-gradient(to bottom, gtkmix($c, white, 0.03), gtkmix($c, white, 0.008));
    box-shadow: $_button_shadow;
  }
  
  @if $t==normalib {
  //
  // normal infofar button
  //
    label, & { color: $tc; }
    color: $tc;
    border: 1px solid $tc;
    background: transparent;
  }
  
  @else if $t==hoverib {
  //
  // hovered infobar button
  //
    label, & { color: $tc; }
    color: $tc;
    border: 1px solid $tc;
    $_bg: linear-gradient(to top, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.04));
    background: image($_bg);
  }

  @if $t==normal-alt {
  //
  // normal button alternative look
  //
    label, & { color: $tc; }
    color: $tc;
    border: 1px solid gtkmix($c, black, 0.16);
    background: linear-gradient(to top, rgba(0, 0, 0, 0.05), transparent), image($c);
  }

  @else if $t==hover-alt {
  //
  // hovered button alternative look
  //
    label, & { color: $tc; }
    color: $tc;
    border: 1px solid gtkmix($c, black, 0.16);
    background: linear-gradient(to bottom, rgba(255, 255, 255, 0.09), rgba(255, 255, 255, 0.04)), image($c);
  }

  @else if $t==active {
  //
  // pushed button
  //
    $button_fgcolor: if($c != gtk("@theme_button_background_normal"), $tc, gtk("@theme_selected_fg_color"));
    label, & { color: $button_fgcolor; }
    color: $button_fgcolor;
    $button_bgcolor: if($c != gtk("@theme_button_background_normal"), $c, gtk("@theme_selected_bg_color"));
    background: linear-gradient(to bottom, gtkmix($button_bgcolor, white, 0.06), $button_bgcolor);
    border: 1px solid gtkmix($button_bgcolor, black, 0.16);
  }

  @else if $t==activeib {
  //
  // pushed infobar button
  //
    label, & { color: $tc; }
    color: $tc;
    border: 1px solid $tc;
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.11), rgba(0, 0, 0, 0.16));
  }

  @else if $t==insensitive {
  //
  // insensitive button
  //
    $_bg: if($c != gtk("@theme_button_background_normal"), gtkalpha($c, 0.5), gtk("@theme_button_background_insensitive"));

    label, & { color: gtkalpha($tc, 0.5); }
    color: gtkalpha($tc, 0.5);

    border: 1px solid gtkmix($c, black, 0.16);
    background: image($_bg);
  }
  
  @else if $t==insensitiveib {
  //
  // insensitive infobar button
  //
    label, & { color: gtkalpha($tc, 0.5); }
    color: gtkalpha($tc, 0.5);

    border: 1px solid gtkalpha($tc, 0.5);
    background: transparent;
  }

  @else if $t==insensitive-active {
  //
  // insensitive pushed button
  //
    $button_bgcolor: if($c != gtk("@theme_button_background_normal"), gtkalpha($c, 0.5), gtk("@insensitive_selected_bg_color"));
    $button_fgcolor: if($c != gtk("@theme_button_background_normal"), gtkalpha($tc, 0.5), gtk("@insensitive_selected_fg_color"));

    label, & { color: $button_fgcolor; }
    color: $button_fgcolor;

    border: 1px solid gtkmix($button_bgcolor, black, 0.16);
    background: image($button_bgcolor);
  }

  @else if $t==backdrop {
  //
  // backdrop button
  //
    $_bg: if($c != gtk("@theme_button_background_normal"), gtkalpha($c, 0.7), gtk("@theme_button_background_backdrop"));

    label, & { color: gtkalpha($tc, 0.7); }
    color: gtkalpha($tc, 0.7);

    border: 1px solid gtkmix($c, black, 0.11);
    background: image($_bg);
  }
  
  @else if $t==backdropib {
  //
  // backdrop normal infofar button
  //
    label, & { color: gtkalpha($tc, 0.7); }
    color: gtkalpha($tc, 0.7);
    border: 1px solid gtkalpha($tc, 0.7);
    background: transparent;
  }
  
  @else if $t==backdropinsensitiveib {
  //
  // backdrop insensitive infobar button
  //
    label, & { color: gtkalpha($tc, 0.3); }
    color: gtkalpha($tc, 0.3);

    border: 1px solid gtkalpha($tc, 0.3);
    background: transparent;
  }

  @else if $t==backdrop-active {
  //
  // backdrop pushed button
  //
    $button_bgcolor: if($c != gtk("@theme_button_background_normal"), gtkalpha($c, 0.7), gtk("@theme_unfocused_selected_bg_color"));
    $button_fgcolor: if($c != gtk("@theme_button_background_normal"), gtkalpha($tc, 0.7), gtk("@theme_text_color"));

    label, & { color: $button_fgcolor; }
    color: $button_fgcolor;
    
    border: 1px solid gtkmix($button_bgcolor, black, 0.11);
    background: image($button_bgcolor);
  }

  @else if $t==backdrop-insensitive {
  //
  // backdrop insensitive button
  //

    $_bg: if($c != gtk("@theme_button_background_normal"), gtkalpha($c, 0.3), gtk("@theme_button_background_backdrop_insensitive"));

    label, & { color: gtkalpha($tc, 0.3); }
    color: gtkalpha($tc, 0.3);

    border: 1px solid gtkmix($c, black, 0.112);
    background: image($_bg);
  }

  @else if $t==backdrop-insensitive-active {
  //
  // backdrop insensitive pushed button
  //

    $button_bgcolor: if($c != gtk("@theme_button_background_normal"), gtkalpha($c, 0.5), gtk("@insensitive_unfocused_selected_bg_color"));
    $button_fgcolor: if($c != gtk("@theme_button_background_normal"), gtkalpha($tc, 0.5), gtk("@insensitive_unfocused_selected_fg_color"));

    label, & { color: $button_fgcolor; }
    color: $button_fgcolor;

    border: 1px solid gtkmix($button_bgcolor, black, 0.05);
    background: image($button_bgcolor);
  }

  @else if $t==undecorated {
  //
  // reset
  //
    box-shadow: none;
    background-color: transparent;
    $button_fill: none !global;
    background: none;
    border-color: transparent;
  }
  
  //Slider Styles
  @else if $t==normal-slider {
  //
  // normal slider look
  //
    label, & { color: $tc; }
    color: $tc;
    border: 1px solid gtkbreezent("@ferengtk_border_generic");
    background: linear-gradient(to bottom, gtkmix($c, white, 0.04), $c);
  }

  @else if $t==hover-slider {
  //
  // hovered slider look
  //
    label, & { color: $tc; }
    color: $tc;
    border: 1px solid gtkbreezent("@ferengtk_border_generic");
    background: linear-gradient(to bottom, gtkmix($c, white, 0.03), gtkmix($c, white, 0.008));
  }
  
  @else if $t==insensitive-slider {
  //
  // insensitive slider
  //
    label, & { color: gtkalpha($tc, 0.5); }
    color: gtkalpha($tc, 0.5);

    border: 1px solid gtkalpha(gtkbreezent("@ferengtk_border_generic"), 0.5);
    background: image(gtk("@theme_button_background_insensitive"));
  }
  
  @else if $t==backdrop-slider {
  //
  // backdrop slider
  //
    label, & { color: gtkalpha($tc, 0.7); }
    color: gtkalpha($tc, 0.7);

    border: 1px solid gtkalpha(gtkbreezent("@ferengtk_border_generic"), 0.7);
    background: image(gtk("@theme_button_background_backdrop"));
  }
  
  @else if $t==backdrop-insensitive-slider {
  //
  // backdrop insensitive slider
  //
    label, & { color: gtkalpha($tc, 0.3); }
    color: gtkalpha($tc, 0.3);

    border: 1px solid gtkalpha(gtkbreezent("@ferengtk_border_generic"), 0.3);
    background: image(gtk("@theme_button_background_backdrop_insensitive"));
  }
}

@mixin headerbar_fill($c, $tc) {
//
// headerbar fill
//
// $c:  base color
// $tc: text color
//
  //Seems like the graidenting is way off, so for now I guess we're just gonna have to have the feren-dark gradient output values
  background: linear-gradient(to bottom, gtkmix($c, white, 0.01), $c);
  background-size: 1px 100%;
  box-shadow: 0 2px 1px -1px $c, 0 2px 1px -1px gtkalpha($tc, 0.15);
  
  label, & {
    color: $tc;
  }
}

@mixin overshoot($p, $t:normal, $c:gtk("@theme_fg_color")) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_small_gradient_length: 5%;
  $_big_gradient_length: 100%;

  $_position: center top;
  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==bottom {
    $_position: center bottom;
    $_linear_gradient_direction: to top;
  }

  @else if $p==right {
    $_position: right center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  @else if $p==left {
    $_position: left center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: $c;

  @if $c==gtk("@theme_fg_color") {
    $_small_gradient_color: gtkbreezent("@ferengtk_border_generic");
    $_big_gradient_color: gtk("@theme_fg_color");

    @if $t==backdrop { $_small_gradient_color: gtkbreezent("@ferengtk_border_generic"); }
  }

  $_small_gradient: -gtk-gradient(radial,
                                  $_position, 0,
                                  $_position, 0.5,
                                  to($_small_gradient_color),
                                  to(gtkalpha($_small_gradient_color, 0)));

  $_big_gradient: -gtk-gradient(radial,
                                $_position, 0,
                                $_position, 0.6,
                                from(gtkalpha($_big_gradient_color, 0.07)),
                                to(gtkalpha($_big_gradient_color, 0)));

  @if $t==normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }

  @else if $t==backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $_position;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}

/***************************
 * Check and Radio buttons *
 ***************************/

  @mixin check($t, $c:gtk("@theme_button_background_normal"), $tc:gtk("@theme_button_foreground_normal"), $checked: false) {
  // Check/Radio drawing function
  //
  // $t:        check/radio type,
  // $c:        base button color for colored* types
  // $tc:       optional text color for colored* types
  // $checked:  bool to chose between checked/unchecked
  //
  // possible $t values:
  // normal, hover, active, insensitive, backdrop, backdrop-insensitive

  //$_border_color: if($c==gtk("@theme_selected_bg_color"), $c gtkbreezent("@ferengtk_border_generic"), gtkbreezent("@ferengtk_border_generic"));
  //$_normal_border_color: if($c != gtk("@theme_button_background_normal"), _border_color($c), gtkbreezent("@ferengtk_border_generic"));
  //$_dim_border_color: gtkalpha($_border_color, 0.7);
  

  @if $t==normal {
    background-clip: if($checked, border-box, padding-box);
    background: linear-gradient(to bottom, gtkmix($c, white, 0.04) 20%, $c 90%);
    border: 1px solid gtkmix($c, black, 0.16);
    color: $tc;
  }

  @if $t==hover {
    background: linear-gradient(to bottom, gtkmix($c, white, 0.04) 20%, $c 90%);
    border: 1px solid gtkmix($c, black, 0.16);
  }

  @if $t==active {
    background: linear-gradient(to bottom, gtkmix($c, white, 0.06) 20%, $c 90%);
    border: 1px solid gtkmix($c, black, 0.16);
    box-shadow: inset 0 1px 1px 0px rgba(0, 0, 0, 0.2);
  }

  @if $t==insensitive {
    background: image($c);
    color: $tc;
    border: 1px solid gtkmix($c, black, 0.16);
  }

  @if $t==backdrop {
    background: image($c);
    color: $tc;
    border: 1px solid gtkmix($c, black, 0.11);
  }

  @if $t==backdrop-insensitive {
    background: image($c);
    color: $tc;
    border: 1px solid gtkmix($c, black, 0.112);
  }
}

