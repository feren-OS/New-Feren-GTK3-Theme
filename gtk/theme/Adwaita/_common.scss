@charset "UTF-8";

$ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
//$asset_suffix: if($variant=='dark', '-dark', '');
$asset_suffix: '';
$backdrop_transition: 200ms ease-out;
$button_transition: all 200ms $ease-out-quad;
$button_radius: 4px;
$menu_radius: 0px;
$window_radius: 0;
$popover_radius: $button_radius;
$border_darkening: rgba(0, 0, 0, 0.15);

// Optional compact sizes for buttons, headerbar and headerbar widgets
$_sizevariant: 'default'; //compact otherwise
$_headerbar_height: 30px;
$_entry_height: if($_sizevariant=='default', 28px, 28px);
$_btn_pad: if($_sizevariant=='default', 3px 6px, 2px 6px);
$_hb_btn_pad: 2.5px;
$_img_btn_pad: if($_sizevariant=='default', 3px, 2px);
$_sel_menu_pad: if($_sizevariant=='default', 5px 10px, 4px 10px);
$_circ_btn_pad: if($_sizevariant=='default', 2px, 2px);
$_switch_margin: if($_sizevariant=='default', 8px, 7px);
$_shadow_color: transparentize(black, 0.9);

//rgba(0,0,0,0.17) = gtkmix(@borders_breeze, @theme_bg_color_breeze, 80%);

* {
  padding: 0;
  -GtkToolButton-icon-spacing: 4;
  -GtkTextView-error-underline-color: gtk("@error_color");

  // The size for scrollbars. The slider is 2px smaller, but we keep it
  // up so that the whole area is sensitive to button presses for the
  // slider. The stepper button is larger in both directions, the slider
  // only in the width

  -GtkScrolledWindow-scrollbar-spacing: 0;

  -GtkToolItemGroup-expander-size: 11;

  -GtkWidget-text-handle-width: 20;
  -GtkWidget-text-handle-height: 24;

  -GtkDialog-button-spacing: 4;
  -GtkDialog-action-area-border: 0;

  // We use the outline properties to signal the focus properties
  // to the adwaita engine: using real CSS properties is faster,
  // and we don't use any outlines for now.

  outline-color: gtkalpha(currentColor, 0.3);
  outline-style: dashed;
  outline-offset: -3px;
  outline-width: 1px;
  -gtk-outline-radius: $button-radius - 2;

  -gtk-secondary-caret-color: gtk("@theme_selected_bg_color")
}


/***************
 * Base States *
 ***************/
.background {
  color: gtk("@theme_fg_color");
  background-color: gtk("@theme_bg_color");

  &:backdrop {
    color: gtk("@theme_unfocused_fg_color");
    background-color: gtk("@theme_unfocused_bg_color");
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

/*
   These wildcard seems unavoidable, need to investigate.
   Wildcards are bad and troublesome, use them with care,
   or better, just don't.
   Everytime a wildcard is used a kitten dies, painfully.
*/

*:disabled { -gtk-icon-effect: dim; }

.gtkstyle-fallback {
  color: gtk("@theme_fg_color");
  background-color: gtk("@theme_bg_color");

  &:hover {
    color: gtk("@theme_fg_color");
    background-color: gtklighten(gtk("@theme_bg_color"), 10%);
  }

  &:active {
    color: gtk("@theme_fg_color");
    background-color: gtkdarken(gtk("@theme_bg_color"), 10%);
  }

  &:disabled {
    color: gtk("@insensitive_fg_color");
    background-color: gtk("@insensitive_bg_color");
  }

  &:selected {
    color: gtk("@theme_selected_fg_color");
    background-color: gtk("@theme_selected_bg_color");
  }
}

.view,
%view {
  color: gtk("@theme_text_color");
  background-color: gtk("@theme_base_color");

  &:backdrop {
    color: gtk("@theme_unfocused_text_color");
    background-color: gtk("@theme_unfocused_base_color");
    &:disabled { color: gtkdarken(gtk("@theme_unfocused_bg_color"), 15%); }
  }

  &:disabled {
    color: gtk("@insensitive_fg_color");
    background-color: gtk("@insensitive_bg_color");
  }

  &:selected {
    &:focus, & {
      @extend %selected_items;

      border-radius: 3px;
    }
  }
}

.view,
textview {
  text {
    @extend %view;

    selection { &:focus, & { @extend %selected_items; }}
  }
}

textview border { background-color: gtkmix(gtk("@theme_bg_color"), gtk("@theme_base_color"), 50%); }

iconview { @extend .view; }

.rubberband,
rubberband {
  border: 1px solid gtkdarken(gtk("@theme_selected_bg_color"), 10%);
  background-color: gtkalpha(gtkdarken(gtk("@theme_selected_bg_color"), 10%), 0.2);
}

flowbox {
  rubberband { @extend rubberband; }

  flowboxchild {
    padding: 3px;

    &:selected {
      @extend %selected_items;

      outline-offset: -2px;
    }
  }
}

.content-view .tile {
  margin: 2px;
  background-color: transparent;
  border-radius: 0;
  padding: 0;
  
  &:backdrop { background-color: transparent; }
  &:active, &:selected { background-color: transparent; }
  &:disabled { background-color: transparent; }
}

label {
  caret-color: currentColor; // this shouldn't be needed.

  &.separator {
    @extend .dim-label;

    color: gtk("@theme_fg_color");

    &:backdrop { color: gtk("@theme_unfocused_fg_color"); }
  }

  row:selected &,
  &:selected { @extend %nobg_selected_items; }

  selection {
    background-color: gtk("@theme_selected_bg_color");
    color: gtk("@theme_selected_fg_color");
  }

  &:disabled {
    color: gtk("@insensitive_fg_color");

    selection { @extend %selected_items:disabled; }

    &:backdrop { color: gtkdarken(gtk("@theme_unfocused_bg_color"), 15%); }
  }

  &:backdrop {
    color: gtk("@theme_unfocused_fg_color");

    selection { @extend %selected_items:backdrop; }
  }
}

.dim-label {
  opacity: 0.55;
  text-shadow: none;
}

assistant {
  .sidebar {
    background-color: gtk("@theme_base_color");
    border-top: 1px solid rgba(0,0,0,0.17);

    &:backdrop {
      background-color: gtk("@theme_unfocused_base_color");
      border-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%);
    }
  }

  &.csd .sidebar { border-top-style: none; }

  .sidebar label { padding: 6px 12px; }

  .sidebar label.highlight { background-color: gtkmix(gtk("@theme_bg_color"), gtk("@theme_fg_color"), 80%); }
}

%osd,
.osd {
  color: gtk("@theme_fg_color");
  border: none;
  background-color: gtk("@theme_bg_color");
  background-clip: padding-box;
  text-shadow: 0 1px black;
  -gtk-icon-shadow: 0 1px black;

  &:backdrop {
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}


/*********************
 * Spinner Animation *
 *********************/
@keyframes spin {
  to { -gtk-icon-transform: rotate(1turn); }
}

spinner {
  background: none;
  &:backdrop { color: gtk("@theme_unfocused_fg_color"); }
  opacity: 0; // non spinning spinner makes no sense
  -gtk-icon-source: -gtk-icontheme('process-working-symbolic');

  &:checked {
    opacity: 1;
    animation: spin 1s linear infinite;

    &:disabled { opacity: 0.5; }
  }
}


/****************
 * Text Entries *
 ****************/

%entry,
entry {
  %entry_basic, & {
    min-height: $_entry_height;
    padding-left: 8px;
    padding-right: 8px;
    border: 1px solid;
    border-radius: $button_radius;
    transition: all 200ms $ease-out-quad;

    @include entry(normal);

    image { // icons inside the entry
      &.left { margin-right: 6px; }
      &.right { margin-left: 6px; }
    }


    &.flat {
      &:focus, &:backdrop, &:disabled, &:backdrop:disabled, & {
        min-height: 0;
        padding: 2px;
        background-color: transparent;
        border-color: transparent;
        border-radius: 0;
      }
    }

    &:focus { @include entry(focus); }

    &:disabled { @include entry(insensitive); }

    &:backdrop {
      @include entry(backdrop);

      transition: $backdrop_transition;
    }

    &:backdrop:disabled { @include entry(backdrop-insensitive); }

    selection { @extend %selected_items; }

    // entry error and warning style
    @each $e_type, $e_color in (error, gtk("@error_color")),
                               (warning, gtk("@warning_color")) {
      &.#{$e_type} {
        color: $e_color;
        border-color: entry_focus_border($e_color);

        &:focus { @include entry(focus, $e_color); }

        selection { background-color: $e_color; }
      }
    }

    image { // entry icons colors
      color: gtkmix(gtk("@theme_fg_color"), gtk("@theme_base_color"), 80%);

      &:hover { color: gtk("@theme_fg_color"); }

      &:active { color: gtk("@theme_selected_bg_color"); }

      &:backdrop { color: gtkmix(gtk("@theme_unfocused_fg_color"), gtk("@theme_unfocused_base_color"), 80%); }
    }

    &:drop(active) {
      &:focus, & {
        border-color: gtk("@theme_selected_bg_color");
        box-shadow: inset 0 0 0 1px gtk("@theme_selected_bg_color");
      }
    }

    .osd & {
      @include entry(osd);

      &:focus { @include entry(osd-focus); }

      &:backdrop { @include entry(osd-backdrop); }

      &:disabled { @include entry(osd-insensitive); }
    }
  }

  progress {
    margin: 2px -6px;
    background-color: transparent;
    background-image: none;
    border-radius: 0;
    border-width: 0 0 2px;
    border-color: gtk("@theme_selected_bg_color");
    border-style: solid;
    box-shadow: none;

    &:backdrop { background-color: transparent; }
  }

   // linked entries
  .linked:not(.vertical) > & { @extend %linked; }
  .linked:not(.vertical) > &:focus + &,
  .linked:not(.vertical) > &:focus + button,
  .linked:not(.vertical) > &:focus + combobox > box > button.combo { border-left-color: entry_focus_border(); }

  .linked:not(.vertical) > &:focus.error + &,
  .linked:not(.vertical) > &:focus.error + button,
  .linked:not(.vertical) > &:focus.error + combobox > box > button.combo { border-left-color: entry_focus_border(gtk("@error_color")); }

  .linked:not(.vertical) > &:drop(active) + &,
  .linked:not(.vertical) > &:drop(active) + button,
  .linked:not(.vertical) > &:drop(active) + combobox > box > button.combo { border-left-color: gtk("@theme_selected_bg_color"); }

  // Vertically linked entries
  // FIXME: take care of "colored" entries
  .linked.vertical > & {
    @extend %linked_vertical;

    // brighter border between linked entries
    &:not(:disabled) + entry:not(:disabled),
    &:not(:disabled) + %entry:not(:disabled) {
      border-top-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_base_color"), 30%);

      &:backdrop { border-top-color: gtkmix(gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%), gtk("@theme_unfocused_base_color"), 30%); }
    }

    // brighter border between linked insensitive entries
    &:disabled + %entry:disabled,
    &:disabled + entry:disabled { border-top-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_base_color"), 30%); }

    // color back the top border of a linked focused entry following another entry.
    // :not(:only-child) is a specificity bump hack.
    + %entry:focus:not(:only-child),
    + entry:focus:not(:only-child) { border-top-color: entry_focus_border(); }

    + %entry:focus.error:not(:only-child),
    + entry:focus.error:not(:only-child) { border-top-color: entry_focus_border(gtk("@error_color")); }

    + %entry:drop(active):not(:only-child),
    + entry:drop(active):not(:only-child) { border-top-color: gtk("@theme_selected_bg_color"); }

    // this takes care of coloring the top border of the focused entry subsequent widget.
    // :not(:only-child) is a specificity bump hack.
    &:focus:not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo { border-top-color: entry_focus_border(); }
    }

    &:focus.error:not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo { border-top-color: entry_focus_border(gtk("@error_color")); }
    }

    &:drop(active):not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo { border-top-color: gtk("@theme_selected_bg_color"); }
    }
  }
}

treeview entry {
  &:focus {
    &:dir(rtl), &:dir(ltr) { // specificity bump hack
      background-color: gtk("@theme_base_color");
      transition-property: color, background;
    }
  }

  &.flat, & {
    border-radius: 0;
    background-image: none;
    background-color: gtk("@theme_base_color");

    &:focus { border-color: gtk("@theme_selected_bg_color"); }
  }
}

.entry-tag {
  // sizing
  padding: 5px;

  margin-top: 2px;
  margin-bottom: 2px;

  // side margins: compensate the entry padding with a negative margin
  // then the negative margin itself
  :dir(ltr) & {
    margin-left: 8px;
    margin-right: -5px;
  }
  :dir(rtl) & {
    margin-left: -5px;
    margin-right: 8px;
  }

  border-style: none;

  $_entry_tag_color: gtk("@theme_selected_fg_color");
  color: $_entry_tag_color;

  $_entry_tag_bg: gtk("@theme_selected_bg_color");
  background: $_entry_tag_bg;

  &:hover {
    background: $_entry_tag_bg rgba(255, 255, 255, 0.1);
  }

  :backdrop & {
    color: gtk("@theme_unfocused_base_color");
    background: gtk("@theme_selected_bg_color");
  }

  &.button {
    background: transparent;
    color: gtkalpha($_entry_tag_color, 0.7);
  }

  :not(:backdrop) &.button {
    &:hover {
      border: 1px solid $_entry_tag_bg;
      color: $_entry_tag_color;
    }
    &:active {
      background: $_entry_tag_bg;
      color: gtkalpha($_entry_tag_color, 0.7);
    }
  }
}

/***********
 * Buttons *
 ***********/
// stuff for .needs-attention
$_dot_color: gtk("@theme_selected_bg_color");
@keyframes needs_attention {
  from {
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.01,
                                    to($_dot_color),
                                    to(transparent));
  }

  to {
    background-image: -gtk-gradient(radial,
                                    center center, 0,
                                    center center, 0.5,
                                    to(gtk("@theme_selected_bg_color")),
                                    to(transparent));
  }
}

%button,
button {
  @at-root %button_basic, & {

    min-height: 24px;
    min-width: 16px;
    padding: $_btn_pad;
    border: 1px solid;
    border-radius: $button_radius;
    transition: $button_transition;

    @include button(normal);

    &.flat {
      @include button(undecorated);
      // to avoid adiacent buttons borders clashing when transitioning, the transition on the normal state is set
      // to none, while it's added back in the hover state, so the button decoration will fade in on hover, but
      // it won't fade out when the pointer leave the button allocation area. To make the transition more evident
      // in this case the duration is increased.
      transition: none;

      &:hover {
        transition: $button_transition;
        transition-duration: 500ms;

        &:active { transition: $button_transition; }
      }
    }

    &:hover {
      @include button(hover);
      -gtk-icon-effect: highlight;
    }

    &:active,
    &:checked {
      @include button(active);

      transition-duration: 50ms;
    }

    &:backdrop {
      &.flat, & {
        @include button(backdrop);

        transition: $backdrop_transition;
        -gtk-icon-effect: none;

        &:active,
        &:checked { @include button(backdrop-active); }

        &:disabled {
          @include button(backdrop-insensitive);

          &:active,
          &:checked { @include button(backdrop-insensitive-active); }
        }
      }
    }

    &.flat { &:backdrop, &:disabled, &:backdrop:disabled { @include button(undecorated); }}

    &:disabled {
      @include button(insensitive);

      &:active,
      &:checked { @include button(insensitive-active); }
    }

    &.image-button {
      min-width: 24px;
      padding-left: $_img_btn_pad;
      padding-right: $_img_btn_pad;
    }

    &.text-button {
      padding-left: 16px;
      padding-right: 16px;
    }

    &.text-button.image-button {
      padding-left: 8px;
      padding-right: 8px;

      label {
        padding-left: 8px;
        padding-right: 8px;
      }
    }

    &:drop(active) {
      color: gtk("@theme_selected_bg_color");
      border-color: gtk("@theme_selected_bg_color");
      box-shadow: inset 0 0 0 1px gtk("@theme_selected_bg_color");
    }
  }

  @at-root %button_selected, & {
    row:selected & {
      border-color: gtk("@theme_selected_bg_color") $border_darkening;

      &.flat:not(:active):not(:checked):not(:hover):not(disabled) {
        color: gtk("@theme_selected_fg_color");
        border-color: transparent;

        &:backdrop { color: gtk("@theme_unfocused_base_color"); }
      }
    }
  }


  // big standalone buttons like in Documents pager
  &.osd {
    min-width: 26px;
    min-height: 32px;

    &.image-button { min-width: 34px; }

    color: gtk("@theme_fg_color");
    border-radius: 4px;

    @include button(osd);

    border: none;
    box-shadow: none;

    &:hover {
      @include button(osd-hover);

      border: none;
      box-shadow: none;
    }

    &:active,
    &:checked {
      @include button(osd-active);

      border: none;
      box-shadow: none;
    }

    &:disabled {
      &:backdrop, & {
        @include button(osd-insensitive);

        border: none;
      }
    }

    &:backdrop {
      @include button(osd-backdrop);

      border: none;
    }
  }

  //overlay / OSD style
  @at-root %osd_button,
  .osd & {
    @include button(osd);

    &:hover { @include button(osd-hover); }

    &:active,
    &:checked { &:backdrop, & { @include button(osd-active); }}

    &:disabled { &:backdrop, & { @include button(osd-insensitive); }}

    &:backdrop { @include button(osd-backdrop); }

    &.flat {
      @include button(undecorated);

      box-shadow: none; //FIXME respect no edge on the button mixin
      text-shadow: 0 1px black;
      -gtk-icon-shadow: 0 1px black;

      &:hover { @include button(osd-hover); }

      &:disabled {
        @include button(osd-insensitive);
        background-image: none;
        border-color: transparent;
        box-shadow: none;
      }

      &:backdrop { @include button(undecorated); }

      &:active,
      &:checked { @include button(osd-active); }
    }
  }

  // Suggested and Destructive Action buttons
  @each $b_type, $b_color in (suggested-action, gtk("@success_color")),
                             (destructive-action, gtk("@error_color")) {
    &.#{$b_type} {
      @include button(normal, $b_color, white);

      &.flat {
        @include button(undecorated);

        color: $b_color; //FIXME: does it work on the dark variant?
      }

      &:hover { @include button(hover, $b_color, white); }

      &:active,
      &:checked { @include button(active, $b_color, white); }

      &:backdrop,
      &.flat:backdrop {
        @include button(backdrop, $b_color, white);

        &:active,
        &:checked { @include button(backdrop-active, $b_color, white); }

        &:disabled {
          @include button(backdrop-insensitive);

          &:active,
          &:checked { @include button(backdrop-insensitive-active, $b_color, white); }
        }
      }

      &.flat {
        &:backdrop, &:disabled, &:backdrop:disabled {
          @include button(undecorated);

          color: gtkalpha($b_color, 0.8);
        }
      }

      &:disabled {
        @include button(insensitive);

        &:active,
        &:checked { @include button(insensitive-active, $b_color, white); }
      }

      .osd & {
        @include button(osd, $b_color);

        &:hover { @include button(osd-hover, $b_color); }

        &:active,
        &:checked { &:backdrop, & { @include button(osd-active, $b_color); }}

        &:disabled { &:backdrop, & { @include button(osd-insensitive, $b_color); }}

        &:backdrop { @include button(osd-backdrop, $b_color); }
      }
    }
  }

  .stack-switcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a label needs just lateral padding while an icon needs vertical
    // padding added too.

    outline-offset: -3px; // needs to be set or it gets overriden by GtkRadioButton outline-offset

    > label {
      padding-left: 6px;  // label padding
      padding-right: 6px; //
    }

    > image {
      padding-left: 6px;   // image padding
      padding-right: 6px;  //
      padding-top: 3px;    //
      padding-bottom: 3px; //
    }

    &.text-button {
      // compensate text-button paddings
      padding-left: 10px;
      padding-right: 10px;
    }

    &.image-button {
      // we want image buttons to have a 1:1 aspect ratio, so compensation
      // of the padding added to the GtkImage is needed
      padding-left: 2px;
      padding-right: 2px;
    }

    &.needs-attention {
      > label,
      > image { @extend %needs_attention; }

      &:active,
      &:checked {
        > label,
        > image {
          animation: none;
          background-image: none;
        }
      }
    }
  }

  // hide separators
  &.font,
  &.file { separator { background-color: transparent; }}

  &.font { > box > box > label { font-weight: bold; }}

  // inline-toolbar buttons
  .inline-toolbar &, .inline-toolbar &:backdrop {
    border-radius: 2px;
    border-width: 1px;
    @extend %linked;
  }

  .primary-toolbar & { -gtk-icon-shadow: none; } // tango icons don't need shadows

  .linked > &,
  .linked > &:hover,
  .linked > &:active,
  .linked > &:checked,
  .linked > &:backdrop { @extend %linked; }

  .linked.vertical > &,
  .linked.vertical > &:hover,
  .linked.vertical > &:active,
  .linked.vertical > &:checked,
  .linked.vertical > &:backdrop { @extend %linked_vertical; }

  &.circular { // The Bloody Circul Button
    border-radius: 9999px;
    -gtk-outline-radius: 9999px;
    padding: $_circ_btn_pad; /* circles instead of ellipses */

    label { padding: 0; }

    // the followind code is needed since we use a darker bottom border on buttons, which looks pretty
    // bad with a 100% border radius (see https://bugzilla.gnome.org/show_bug.cgi?id=771205 for details),
    // so on relevant states we an additional background-image with a gradient clipped on the border-box,
    // so setting a transparent border would reveal it.

    $_border_bg: linear-gradient(to top, rgba(0,0,0,0.17) 25%, rgba(0,0,0,0.17) 50%);

    &:not(.flat):not(:checked):not(:active):not(:disabled):not(:backdrop) {
      @include button(normal);

      background-image: $button_fill, $_border_bg;
      border-color: transparent;
    }

    &:hover:not(:checked):not(:active):not(:disabled):not(:backdrop) {
      @include button(hover);

      background-image: $button_fill, $_border_bg;
      border-color: transparent;
    }

    background-origin: padding-box, border-box;
    background-clip: padding-box, border-box;
  }
}

%needs_attention {
  animation: needs_attention 150ms ease-in;
  $_dot_shadow: _text_shadow_color();
  $_dot_shadow_r: 0.5;
  background-image: -gtk-gradient(radial,
                                  center center, 0,
                                  center center, 0.5,
                                  to($_dot_color),
                                  to(transparent)),
                    -gtk-gradient(radial,
                                  center center, 0,
                                  center center, $_dot_shadow_r,
                                  to($_dot_shadow),
                                  to(transparent));
  background-size: 6px 6px, 6px 6px;
  background-repeat: no-repeat;

  background-position: right 3px, right 4px;

  &:backdrop { background-size: 6px 6px, 0 0;}

  &:dir(rtl) {
    background-position: left 3px, left 4px;
  }
}


// all the following is for the +|- buttons on inline toolbars, that way
// should really be deprecated...
.inline-toolbar toolbutton > button { // redefining the button look is
                                      // needed since those are flat...
  @include button(normal);

  &:hover { @include button(hover); }

  &:active,
  &:checked{ @include button(active); }

  &:disabled {
    @include button(insensitive);

    &:active,
    &:checked { @include button(insensitive-active); }
  }

  &:backdrop {
    @include button(backdrop);

    &:active,
    &:checked { @include button(backdrop-active); }

    &:disabled {
      @include button(backdrop-insensitive);

      &:active,
      &:checked { @include button(backdrop-insensitive-active); }
    }
  }
}

// More inline toolbar buttons
toolbar.inline-toolbar toolbutton,
toolbar.inline-toolbar toolbutton:backdrop {
  > button.flat { @extend %linked_middle; }

  &:first-child > button.flat { @extend %linked:first-child; }

  &:last-child > button.flat { @extend %linked:last-child; }

  &:only-child > button.flat { @extend %linked:only-child; }
}

%linked_middle {
  border-radius: 0;
  border-right-style: none;
}

%linked_left {
    border-top-left-radius: $button_radius;
    border-bottom-left-radius: $button_radius;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
    border-right-style: none;
}

%linked_right {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
    border-top-right-radius: $button_radius;
    border-bottom-right-radius: $button_radius;
    border-right-style: solid;
}

// .linked assumes Box, which reverses nodes in RTL, so 1st child is always left
%linked {
  @extend %linked_middle;

  &:first-child { @extend %linked_left; }
  &:last-child { @extend %linked_right; }

  &:only-child {
    border-radius: $button_radius;
    border-style: solid;
  }
}

// Other widgets use widget child order, so 1st/last child are at text start/end
%linked_flippable {
  @extend %linked_middle;

  &:dir(ltr) {
    &:first-child { @extend %linked_left; }
    &:last-child { @extend %linked_right; }
  }

  &:dir(rtl) {
    &:first-child { @extend %linked_right; }
    &:last-child { @extend %linked_left; }
  }

  &:only-child {
    border-radius: $button_radius;
    border-style: solid;
  }
}

%linked_vertical_middle {
  border-style: solid solid none solid;
  border-radius: 0;
}

%linked_vertical{
  @extend %linked_vertical_middle;

  &:first-child {
    border-top-left-radius: $button_radius;
    border-top-right-radius: $button_radius;
  }

  &:last-child {
    border-bottom-left-radius: $button_radius;
    border-bottom-right-radius: $button_radius;
    border-style: solid;
  }

  &:only-child {
    border-radius: $button_radius;
    border-style: solid;
  }
}

%undecorated_button {
  background-color: transparent;
  background-image: none;
  border-color: transparent;
  //box-shadow: inset 0 1px gtktransparentize(white, 1),
              //0 1px gtktransparentize(white, 1);
  //text-shadow: none;
  //-gtk-icon-shadow: none;
}

/* menu buttons */
modelbutton.flat,
.menuitem.button.flat {
  min-height: 26px;
  padding-left: 5px;
  padding-right: 5px;
  border-radius: $button_radius;
  outline-offset: -2px;

  @extend %undecorated_button;

  &:hover { background-color: gtk("@theme_selected_bg_color"); color: gtk("@theme_selected_fg_color") }

  &:selected { @extend %selected_items; }

  &:backdrop,
  &:backdrop:hover { @extend %undecorated_button; }
}

modelbutton.flat arrow {
  background: none;

  &:hover { background: none; }

  &.left { -gtk-icon-source: -gtk-icontheme("pan-start-symbolic"); }

  &.right { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); }
}

button.color {
  padding: 4px;

  colorswatch:only-child {
    &, overlay { border-radius: 0; }

    box-shadow: 0 1px _text_shadow_color();

    .osd & { box-shadow: none; }
  }

  .osd &, & {
    &:disabled,
    &:backdrop,
    &:active,
    &:checked { colorswatch:only-child { box-shadow: none; }}
  }
}

/* list buttons */
/* tone down as per new designs, see issue #1473, #1748 */
list row button.image-button:not(.flat) {
  @extend %undecorated_button;
  border: 1px solid gtkalpha(rgba(0,0,0,0.17), .5);
  &:hover { @include button(hover); }
  &:active,
  &:checked { @include button(active); }
}

/*********
 * Links *
 *********/

%link,
*:link {
  color: gtk("@link_color");

  &:visited {
    color: gtk("@link_visited_color");

    *:selected & { color: gtkmix(gtk("@theme_selected_fg_color"), gtk("@theme_selected_bg_color"), 60%); }
  }

  &:hover {
    color: gtklighten(gtk("@link_color"),10%);

    *:selected & { color: gtkmix(gtk("@theme_selected_fg_color"), gtk("@theme_selected_bg_color"), 90%); }
  }

  &:active {
    color: gtk("@link_color");

    *:selected & { color: gtkmix(gtk("@theme_selected_fg_color"), gtk("@theme_selected_bg_color"), 80%); }
  }

  &:disabled, &:disabled:backdrop { color: gtkalpha(gtkdesaturate(gtk("@link_color"),100%), 0.8); }

  &:backdrop { &:backdrop:hover, &:backdrop:hover:selected, & { color: gtk("@theme_selected_bg_color"); }}

  @at-root %link_selected,
  &:selected,
  *:selected & { color: gtkmix(gtk("@theme_selected_fg_color"), gtk("@theme_selected_bg_color"), 80%); }
}

button:link,
button:visited {
  @extend %undecorated_button;

  @extend *:link;

  text-shadow: none;

  &:hover,
  &:active,
  &:checked {
    @extend %undecorated_button;

    text-shadow: none;
  }

  > label {
    @extend %link;

    text-decoration-line: underline;

  }
}


/*****************
 * GtkSpinButton *
 *****************/
spinbutton {
  &:not(.vertical) {
    // in this horizontal configuration, the whole spinbutton
    // behaves as the entry, so we extend the entry styling
    // and nuke the style on the internal entry
    @extend %entry;

    padding: 0;

    %spinbutton_horz_entry {
      min-width: 28px;
      // reset all the other props since the spinbutton node is styled here
      margin: 0;
      background: none;
      background-color: transparent;
      border: none;
      border-radius: 0;
      box-shadow: none;

      &:backdrop:disabled { background-color: transparent; }
    }

    entry {
      @extend %spinbutton_horz_entry;
    }

    button {
      min-height: 16px;
      margin: 0;
      padding-bottom: 0;
      padding-top: 0;
      color: gtkmix(gtk("@theme_fg_color"), gtk("@theme_base_color"), 90%);
      background-image: none;
      border-style: none none none solid;
      border-color: gtkalpha(rgba(0,0,0,0.17), 0.3);
      border-radius: 0;
      box-shadow: none;

      &:dir(rtl) { border-style: none solid none none; }

      &:hover {
        color: gtk("@theme_fg_color");
        background-color: gtkalpha(gtk("@theme_fg_color"), 0.05);
      }

      &:disabled {
        color: gtkalpha(gtk("@insensitive_fg_color"), 0.3);
        background-color: transparent;
      }

      &:active {
        background-color: gtkalpha(black, 0.1);
        box-shadow: inset 0 2px 3px -1px gtkalpha(black, 0.2);
      }

      &:backdrop {
        color: gtkmix(gtk("@theme_unfocused_fg_color"), gtk("@theme_unfocused_base_color"), 90%);
        background-color: transparent;
        border-color: gtkalpha(gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%), 0.3);
        transition: $backdrop_transition;
      }

      &:backdrop:disabled {
        color: gtkalpha(gtkdarken(gtk("@theme_unfocused_bg_color"), 15%),0.3);
        background-color: transparent;
        background-image: none;
        border-style: none none none solid; // It is needed or it gets overridden

        &:dir(rtl) { border-style: none solid none none; }
      }

      &:dir(ltr):last-child { border-radius: 0 $button_radius $button_radius 0; }

      &:dir(rtl):first-child { border-radius: $button_radius 0 0 $button_radius; }
    }
  }

  // OSD horizontal
  .osd &:not(.vertical) {
    entry {
      @extend %spinbutton_horz_entry;
    }

    button {
      @include button(undecorated);

      color: gtk("@theme_fg_color");
      border-style: none none none solid;
      border-color: gtkalpha(rgba(0,0,0,0.17), 0.7);
      border-radius: 0;
      box-shadow: none;
      -gtk-icon-shadow: 0 1px black;

      &:dir(rtl) { border-style: none solid none none; }

      &:hover {
        @include button(undecorated);

        color: gtk("@theme_fg_color");
        border-color: gtkalpha(gtkopacify(rgba(0,0,0,0.17), 1), 0.5);
        background-color: gtkalpha(gtk("@theme_fg_color"), 0.1);
        -gtk-icon-shadow: 0 1px black;
        box-shadow: none;
      }

      &:backdrop {
        @include button(undecorated);

        color: gtk("@theme_fg_color");
        border-color: gtkalpha(gtkopacify(rgba(0,0,0,0.17), 1), 0.5);
        -gtk-icon-shadow: none;
        box-shadow: none;
      }

      &:disabled {
        @include button(undecorated);

        color: gtk("@insensitive_fg_color");
        border-color: gtkalpha(gtkopacify(rgba(0,0,0,0.17), 1), 0.5);
        -gtk-icon-shadow: none;
        box-shadow: none;
      }

      &:dir(ltr):last-child { border-radius: 0 $button_radius $button_radius 0; }

      &:dir(rtl):first-child { border-radius: $button_radius 0 0 $button_radius; }
    }
  }

  // Vertical
  &.vertical {
    // in the vertical configuration, we treat the spinbutton
    // as a box, and tweak the style of the entry in the middle
    // so that it's linked

    // FIXME: this should not be set at all, but otherwise it gets the wrong
    // color
    &:disabled { color: gtk("@insensitive_fg_color"); }

    &:backdrop:disabled { color: gtkdarken(gtk("@theme_unfocused_bg_color"), 15%); }

    &:drop(active) {
      border-color: transparent;
      box-shadow: none;
    }

    entry {
      min-height: 32px;
      min-width: 32px;
      padding: 0;
      border-radius: 0;
    }

    button {
      min-height: 32px;
      min-width: 32px;
      padding: 0;

      &.up { @extend %top_button; }

      &.down { @extend %bottom_button; }
    }

    %top_button {
      border-radius: $button_radius $button_radius 0 0;
      border-style: solid solid none solid;
    }

    %bottom_button {
      border-radius: 0 0 $button_radius $button_radius;
      border-style: none solid solid solid;
    }
  }

  // OSD vertical
  .osd &.vertical button:first-child {
    @include button(osd);

    &:hover { @include button(osd-hover);}

    &:active { @include button(osd-active); }

    &:disabled { @include button(osd-insensitive); }

    &:backdrop { @include button(osd-backdrop); }
  }

  // Misc
  treeview &:not(.vertical) {
    min-height: 0;
    border-style: none;
    border-radius: 0;

    entry {
      min-height: 0;
      padding: 1px 2px;
    }
  }
}


/**************
 * ComboBoxes *
 **************/
combobox {
  arrow {
    -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    min-height: 16px;
    min-width: 16px;
  }

  &.linked {
    button:nth-child(2) {
      &:dir(ltr) { @extend %linked:last-child; }
      &:dir(rtl) { @extend %linked:first-child; }
    }
  }

  &:drop(active) { // FIXME: untested
    box-shadow: none;

    button.combo { @extend %button_basic:drop(active); }
  }
}

.linked > combobox > box > button.combo {
  // the combo is a composite widget so the way we do button linking doesn't
  // work, special case needed. See
  // https://bugzilla.gnome.org/show_bug.cgi?id=733979

  &:dir(ltr),
  &:dir(rtl) { @extend %linked_middle; } // specificity bump
}

.linked:not(.vertical) > combobox:first-child > box > button.combo { @extend %linked:first-child; }
.linked:not(.vertical) > combobox:last-child > box > button.combo { @extend %linked:last-child; }
.linked:not(.vertical) > combobox:only-child > box > button.combo { @extend %linked:only-child; }

.linked.vertical > combobox > box > button.combo { @extend %linked_vertical_middle; }
.linked.vertical > combobox:first-child > box > button.combo { @extend %linked_vertical:first-child;}
.linked.vertical > combobox:last-child > box > button.combo { @extend %linked_vertical:last-child; }
.linked.vertical > combobox:only-child > box > button.combo { @extend %linked_vertical:only-child; }


/************
 * Toolbars *
 ************/
%toolbar {
  -GtkWidget-window-dragging: true;
  padding: 4px;
  background-color: gtk("@theme_bg_color");
  color: gtk("@theme_fg_color");
  
  &:backdrop {
      background-color: gtk("@theme_unfocused_bg_color");
      color: gtk("@theme_unfocused_fg_color");
/*       border-color: gtktransparentize(gtk("@theme_unfocused_fg_color"), 0.85); */
  }
  
}


toolbar {
  @extend %toolbar;

  padding: 4px 3px 3px 4px;

  // on OSD
  .osd & { background-color: transparent; }

  // stand-alone OSD toolbars
  &.osd {
    padding: 13px;
    border: none;
    border-radius: 4px;
    background-color: gtk("@theme_bg_color");

    &.left,
    &.right,
    &.top,
    &.bottom { border-radius: 0; } // positional classes for `attached` osd toolbars
  }

  // toolbar separators
  &.horizontal separator { margin: 0 7px 1px 6px; }
  &.vertical separator { margin: 6px 1px 7px 0; }

  &:not(.inline-toolbar):not(.osd) {
    // workaround: add margins to the children of tool items to simulate
    // spacing, ignore the overflow button (.toggle) and the overflow menu
    // (.popup)
    > *:not(.toggle):not(.popup) > * {
      margin-right: 1px;
      margin-bottom: 1px;
    }
  }
}

//searchbar, location-bar & inline-toolbar
.inline-toolbar {
  @extend %toolbar;

  //@extend %darkbar;

  padding: 3px;
  border-width: 0 1px 1px;
  border-radius: 0  0 5px 5px;
}

searchbar > revealer > box,
.location-bar {
  @extend %toolbar;

  //@extend %darkbar;

  border-width: 0 0 1px;
  padding: 3px;
}

searchbar > revealer > box {
  // workaround: undo the GtkContainer:border-width and use CSS padding instead
  margin: -6px;
  padding: 6px;
}

//%darkbar {
//  border-style: solid;
//  border-color: rgba(0,0,0,0.17);
//  $_bg: gtkmix(gtk("@theme_bg_color"), rgba(0,0,0,0.17), 70%);
//  background-color: $_bg;
//
//  &:backdrop {
//    border-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%);
//    background-color: gtk("@theme_unfocused_bg_color") rgba(0,0,0,0.85);
//    box-shadow: none;
//    transition: $backdrop_transition;
//  }
//}


/***************
 * Header bars *
 ***************/
%titlebar,
headerbar {
  padding: 0 6px;
  min-height: $_headerbar_height;
  border-width: 0 0 1px;
  border-style: solid;
  border-color: gtkalpha(gtk("@theme_titlebar_foreground"), 0.15);
  border-radius: 0;
  color: gtk("@theme_titlebar_foreground");
  background: gtk("@theme_titlebar_background") url("assets/titlebar-texture.svg");
  background-size: 1px 100%;

  &:backdrop {
    border-color: gtkalpha(gtk("@theme_titlebar_foreground_backdrop"), 0.15);
    color: gtk("@theme_titlebar_foreground_backdrop");
    background: gtk("@theme_titlebar_background_backdrop");
    //box-shadow: inset 0 1px $top_hilight;

    transition: $backdrop_transition;
  }

  .title {
    padding-left: 12px;
    padding-right: 12px;
    //font-weight: bold;
  }

  .subtitle {
    font-size: smaller;
    padding-left: 12px;
    padding-right: 12px;

    @extend .dim-label;
  }

  /* Darken switchbuttons for headerbars. issue #1588 */
  /*stackswitcher button:checked,
  button.toggle:checked {

    background: if($variant == 'light', image(gtkdarken(gtk("@theme_bg_color"), 17%)), image(gtkdarken(gtk("@theme_bg_color"), 9%)));
    border-color: gtkdarken(rgba(0,0,0,0.17), 3%);
    border-top-color: gtkdarken(rgba(0,0,0,0.17), 8%);
    &:backdrop {
      @include button(backdrop-active);
    }
  }*/

  .selection-mode &,
  &.selection-mode {
    //$_hc: gtkmix($top_hilight, gtk("@success_color"), 50%); // hilight color

    color: gtk("@theme_selected_fg_color");
    //border-color: $suggested_border_color;
    //text-shadow: 0 -1px gtktransparentize(black, 0.5);

    background: gtk("@theme_selected_bg_color") url("assets/titlebar-texture.svg");
    background-size: 1px 100%;

    &:backdrop {
      background-color: gtk("@theme_selected_bg_color");
      background-image: none;
      //box-shadow: inset 0 1px gtkmix($top_hilight, gtk("@theme_selected_bg_color"), 60%);
      
      label { 
        text-shadow: none;
        color: gtk("@theme_selected_fg_color"); 
      }
    }

    .subtitle:link { @extend *:link:selected;  }

    button {
      @include button(normal, gtk("@theme_selected_bg_color"), gtk("@theme_selected_fg_color"));

      &.flat { @include button(undecorated); }

      &:hover { @include button(hover, gtk("@theme_selected_bg_color"), gtk("@theme_selected_fg_color")); }

      &:active,
      &:checked,
      &.toggle:checked,
      &.toggle:active { @include button(active, gtk("@theme_selected_bg_color"), gtk("@theme_selected_fg_color")); }

      &:backdrop {
        &.flat, & {
          @include button(backdrop, gtk("@theme_selected_bg_color"), gtk("@theme_selected_fg_color"));

          -gtk-icon-effect: none;
          border-color: gtk("@theme_selected_bg_color") $border_darkening;

          &:active,
          &:checked {
            @include button(backdrop-active, gtk("@theme_selected_bg_color"), gtk("@theme_selected_fg_color"));

            border-color: gtk("@theme_selected_bg_color") $border_darkening;
          }

          &:disabled {
            @include button(backdrop-insensitive, gtk("@theme_selected_bg_color"), gtk("@theme_selected_fg_color"));

            border-color: gtk("@theme_selected_bg_color") $border_darkening;

            &:active, &:checked {
              @include button(backdrop-insensitive-active, gtk("@theme_selected_bg_color"), gtk("@theme_selected_fg_color"));

              border-color: gtk("@theme_selected_bg_color") $border_darkening;
            }
          }
        }
      }

      &.flat { &:backdrop, &:disabled, &:backdrop:disabled { @include button(undecorated); }}

      &:disabled {
        @include button(insensitive, gtk("@theme_selected_bg_color"), gtk("@theme_selected_fg_color"));

        &:active,
        &:checked { @include button(insensitive-active, gtk("@theme_selected_bg_color"), gtk("@theme_selected_fg_color")); }
      }

      &.suggested-action {
        @include button(normal);

        border-color: gtk("@success_color") $border_darkening;

        &:hover {
          @include button(hover);

          border-color: gtk("@success_color") $border_darkening;
        }

        &:active {
          @include button(active);

          border-color: gtk("@success_color") $border_darkening;
        }

        &:disabled {
          @include button(insensitive);

          border-color: gtk("@success_color") $border_darkening;
        }

        &:backdrop {
          @include button(backdrop);

          border-color: gtk("@success_color") $border_darkening;
        }

        &:backdrop:disabled {
          @include button(backdrop-insensitive);

          border-color: gtk("@success_color") $border_darkening;
        }
      }
    }

    .selection-menu {
      &:backdrop, & {
        //border-color: gtkalpha(gtk("@theme_selected_bg_color"), 0);
        border-color: transparent;
        //background-color: gtkalpha(gtk("@theme_selected_bg_color"), 0);
        background-color: transparent;
        background-image: none;
        box-shadow: none;
        min-height: 20px;
        padding: $_sel_menu_pad;

        arrow { -GtkArrow-arrow-scaling: 1; }

        .arrow {
          -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
          color: gtkalpha(gtk("@theme_selected_fg_color"),0.5);
          -gtk-icon-shadow: none;
        }
      }
    }
  }

  // squared corners when the window is maximized, tiled, or fullscreen
  .tiled &,
  .tiled-top &,
  .tiled-right &,
  .tiled-bottom &,
  .tiled-left &,
  .maximized &,
  .fullscreen & {
    &:backdrop, & {
      border-radius: 0;
    }
  }

  &.default-decoration {
    min-height: 28px;
    padding: 4px;

    button.titlebutton {
      min-height: 28px;
      min-width: 28px;
      margin: 0;
      padding: 0;
    }
  }
  

  
  separator.titlebutton { opacity: 0; } /* hide the close button separator */

  .solid-csd & {
    &:backdrop, & {
      &:dir(rtl), &:dir(ltr) { // specificity bump
        margin-left: -1px;
        margin-right: -1px;
        margin-top: -1px;
        border-radius: 0;
        box-shadow: none;
      }
    }
  }
}

headerbar {
  // add vertical margins to common widget on the headerbar to avoid them spanning the whole height
  entry,
  spinbutton,
  separator:not(.sidebar),
  button {
    margin-top: $_hb_btn_pad;
    margin-bottom: $_hb_btn_pad;
  }
  switch {
    margin-top: $_switch_margin;
    margin-bottom: $_switch_margin;
  }

  &.titlebar headerbar:not(.titlebar) {
    // Drop the background of non-titlebar nested headerbars. This is needed to
    // work around headerbar sliding animation issues without refactoring
    // Adwaita's support of titlebars and headerbars as it may break
    // applications.
    // See https://gitlab.gnome.org/GNOME/gtk/issues/1264 for more information.
    background: none;
    box-shadow: none;
  }
}

.background .titlebar {
  &:backdrop, & {
    border-top-left-radius: $window_radius;
    border-top-right-radius: $window_radius;
  }
}

.background.tiled .titlebar,
.background.tiled-top .titlebar,
.background.tiled-right .titlebar,
.background.tiled-bottom .titlebar,
.background.tiled-left .titlebar,
.background.maximized .titlebar,
.background.solid-csd .titlebar {
  &:backdrop, & {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }
}

headerbar { // headerbar border rounding

  window separator:first-child + &,
  window &:first-child { &:backdrop, & { border-top-left-radius: 0px; }}
  window &:last-child { &:backdrop, & { border-top-right-radius: 0px; }}

  window stack & { // tackles the stacked headerbars case
    &:first-child, &:last-child {
      &:backdrop, & {
        border-top-left-radius: 0px;
        border-top-right-radius: 0px;
      }
    }
  }

  window.tiled &,
  window.tiled-top &,
  window.tiled-right &,
  window.tiled-bottom &,
  window.tiled-left &,
  window.maximized &,
  window.fullscreen &,
  window.solid-csd & {
    &, &:backdrop {
      &,
      &:first-child,
      &:last-child,
      &:only-child {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }
    }
  }
}

.titlebar:not(headerbar) {
  window.csd > & {
    // in csd we assume every titlebar is a headerbar so reset anything, this is needed for split toolbars cases
    padding: 0;
    background-color: transparent;
    background-image: none;
    border-style: none;
    border-color: transparent;
    box-shadow: none;
  }

  separator { background-color: rgba(0,0,0,0.17); }  // FIXME: use darker border?

  @extend %titlebar;
}

// Development versions of apps to use a differently styled headerbar

window.devel {
  headerbar.titlebar:not(.selection-mode) {
    $c: gtkdarken(gtk("@theme_bg_color"), 10%);
    $gradient: -gtk-icontheme("system-run-symbolic") 90% 0/256px 256px no-repeat,
               linear-gradient(to right, transparent 65%, gtkalpha(gtk("@theme_selected_bg_color"), 0.2)),
               linear-gradient(to top, gtkdarken($c, 3%), $c 3px, gtklighten($c, 6%));

    background: gtk("@theme_bg_color") $gradient;
    color: gtkalpha(gtk("@theme_fg_color"), 0.1);

    label { color: gtk("@theme_fg_color"); }

    &:backdrop {
      background: gtk("@theme_bg_color") -gtk-icontheme("system-run-symbolic") 90% 0/256px 256px no-repeat,
                  image(gtk("@theme_bg_color")); /* background-color would flash */
      color: gtkalpha(gtk("@theme_fg_color"), 0.05);

      label { color: gtk("@theme_unfocused_fg_color"); }
    }
  }
}

/************
 * Pathbars *
 ************/

// GtkPathBar does not work with just .linked, so we must override that. But we
// can’t simply remove .linked from the widget as that might break other themes.
// Note also we select on filechooser to avoid interfering with NautilusPathBar.
filechooser .path-bar.linked > button {
  @extend %linked_flippable;
}

.path-bar button {
  &.text-button, &.image-button, & {
    padding-left: 4px;
    padding-right: 4px;
  }

  &.text-button.image-button label {
    padding-left: 0;
    padding-right: 0;
  }

  &.text-button.image-button, & {
    label:last-child { padding-right: 8px; }
    label:first-child { padding-left: 8px; }
  }

  image {
    padding-left: 4px;
    padding-right: 4px;
  }

  &.slider-button {
    padding-left: 0;
    padding-right: 0;
  }
}


/**************
 * Tree Views *
 **************/
treeview.view {
  @at-root * {
    -GtkTreeView-horizontal-separator: 4;
    -GtkTreeView-grid-line-width: 1;
    -GtkTreeView-grid-line-pattern: '';
    -GtkTreeView-tree-line-width: 1;
    -GtkTreeView-tree-line-pattern: '';
    -GtkTreeView-expander-size: 16;
   }

  border-left-color: gtkmix(gtk("@theme_fg_color"), gtk("@theme_base_color"), 50%); // this is actually the tree lines color,
  border-top-color: gtk("@theme_bg_color");                         // while this is the grid lines color, better then nothing

  rubberband { @extend rubberband; } // to avoid borders being overridden by the previously set props

  &:selected {
    &:focus, & {
      border-radius: 0;

      @extend %selected_items;
    }

    &:backdrop, & {
      border-left-color: gtkmix(gtk("@theme_selected_fg_color"), gtk("@theme_selected_bg_color"), 50%);
      border-top-color: gtkalpha(gtk("@theme_fg_color"), 0.2); // doesn't work unfortunatelly
    }
  }

  &:disabled {
    color: gtk("@insensitive_fg_color");

    &:selected {
      color: gtkmix(gtk("@theme_selected_fg_color"), gtk("@theme_selected_bg_color"), 40%);
      &:backdrop { color: gtkmix(gtkalpha(gtk("@theme_selected_fg_color"), 0.8), gtk("@theme_selected_bg_color"), 30%); }
    }

    &:backdrop { color: gtkdarken(gtk("@theme_unfocused_bg_color"), 15%); }
  }

  &.separator {
    min-height: 2px;
    color: gtk("@theme_bg_color");

    &:backdrop { color: gtkalpha(gtk("@theme_bg_color"), 0.2); }
  }

  &:backdrop {
    border-left-color: gtkmix(gtk("@theme_unfocused_fg_color"), gtk("@theme_unfocused_bg_color"), 50%);
    border-top: gtk("@theme_unfocused_bg_color");
  }
  &:drop(active) {
    border-style: solid none;
    border-width: 1px;
    border-color: gtk("@theme_selected_bg_color") $border_darkening;

    &.after { border-top-style: none; }

    &.before { border-bottom-style: none; }
  }

  &.expander {
    -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');

    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

    color: gtkmix(gtk("@theme_text_color"), gtk("@theme_base_color"), 70%);

    &:hover { color: gtk("@theme_text_color"); }

    &:selected {
      color: gtkmix(gtk("@theme_selected_fg_color"), gtk("@theme_selected_bg_color"), 70%);

      &:hover { color: gtk("@theme_selected_fg_color"); }

      &:backdrop { color: gtkmix(gtkalpha(gtk("@theme_selected_fg_color"), 0.8), gtk("@theme_selected_bg_color"), 70%); }
    }

    &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }

    &:backdrop { color: gtkmix(gtk("@theme_unfocused_fg_color"), gtk("@theme_unfocused_base_color"), 70%); }
  }

  &.progressbar { // progress bar in treeviews
    @if $variant == light { color: gtk("@theme_base_color"); }

    background-color: gtk("@theme_selected_bg_color");
    background-image: image(gtk("@theme_selected_bg_color"));
    box-shadow: none;

    &:selected {
      &:focus, & {

        color: gtk("@theme_selected_bg_color");

        background-image: image(gtk("@theme_base_color"));

        &:backdrop {
          color: gtk("@theme_selected_bg_color");
          background-color: gtk("@theme_unfocused_base_color");
        }
      }
    }

    &:backdrop {
      color: gtk("@theme_unfocused_base_color");
      background-image: none;
      box-shadow: none;
    }
  }

  &.trough { // progress bar trough in treeviews
    background-color: gtkalpha(gtk("@theme_fg_color"),0.1);

    &:selected {
      &:focus, & {
        background-color: gtkalpha(gtk("@theme_selected_fg_color"), 0.3);

      }
    }
  }

  header {
    button {
      $_column_header_color: gtkmix(gtk("@theme_fg_color"), gtk("@theme_base_color"), 50%);

      @extend %column_header_button;

      color: $_column_header_color;
      background-color: gtk("@theme_base_color");
      font-weight: bold;
      text-shadow: none;
      box-shadow: none;

      &:hover {
        @extend %column_header_button;

        color: gtkmix($_column_header_color, gtk("@theme_fg_color"), 50%);
        box-shadow: none;
        transition: none; //I shouldn't need this
      }

      &:active {
        @extend %column_header_button;

        color: gtk("@theme_fg_color");
        transition: none; //I shouldn't need this
      }
    }
  }

  button.dnd,
  header.button.dnd { // for treeview-like derive widgets
    &:active, &:selected, &:hover, & {
      padding: 0 6px;
      color: gtk("@theme_base_color");
      background-image: none;
      background-color: gtk("@theme_selected_bg_color");
      border-style: none;
      border-radius: 0;
      box-shadow: inset 0 0 0 1px gtk("@theme_base_color");
      text-shadow: none;
      transition: none;
    }
  }

  acceleditor > label { background-color: gtk("@theme_selected_bg_color"); } // see tests/testaccel to test
}

%column_header_button {
  padding: 0 6px;
  background-image: none;
  border-style: none solid solid none;
  border-color: gtk("@theme_bg_color");
  border-radius: 0;
  text-shadow: none;

  &:disabled {
    border-color: gtk("@theme_bg_color");
    background-image: none;
  }

  &:backdrop {
    color: gtkmix(gtk("@theme_unfocused_fg_color"), gtk("@theme_unfocused_bg_color"), 50%);
    border-color: gtk("@theme_unfocused_bg_color");
    border-style: none solid solid none;
    background-image: none;
    background-color: gtk("@theme_unfocused_base_color");

    &:disabled {
      border-color: gtk("@theme_unfocused_bg_color");
      background-image: none;
    }
  }

  &:last-child { &:backdrop, & { border-right-style: none; }}
}



/*********
 * Menus *
 *********/
menubar,
.menubar {
  -GtkWidget-window-dragging: true;
  padding: 0px;
  //box-shadow: inset 0 -1px gtktransparentize(gtk("@theme_fg_color"), 0.85);
  background-color: gtk("@theme_bg_color");
  color: gtk("@theme_fg_color");
  
  &:backdrop {
      background-color: gtk("@theme_unfocused_bg_color");
      color: gtk("@theme_unfocused_fg_color");
/*       border-color: gtktransparentize(gtk("@theme_unfocused_fg_color"), 0.85); */
  }

  > menuitem {
    min-height: 16px;
    padding: 4px 8px;

    // remove padding and rounding from menubar submenus
    menu {
      .csd &, & {
        border-radius: 0;
        padding: 0;
      }
    }

    &:hover { //Seems like it :hover even with keyboard focus
      box-shadow: inset 0 -3px gtk("@theme_selected_bg_color");
      color: gtk("@link_color");
    }

    &:disabled {
      color: gtk("@insensitive_fg_color");
      box-shadow: none;
    }
  }

  // remove padding and rounding from menubar submenu decoration
  .csd.popup decoration {border-radius:0;}
}

// Needed to make the border-radius of menus work
// otherwise the background bleeds out of the menu edges
.background.popup { background-color: transparent; }

menu,
.menu,
.context-menu {
  margin: 4px; // see https://bugzilla.gnome.org/show_bug.cgi?id=591258
  padding: 0px 0px;
  background: gtkalpha(gtk("@theme_base_color"), 0.94) linear-gradient(to bottom left, transparent, rgba(0, 0, 0, 0.03), rgba(0, 0, 0, 0.12));
  //border: 1px solid rgba(0,0,0,0.17); // adds borders in a non composited env

  .csd & {
    border: none; // axes borders in a composited env
    border-radius: $menu_radius;
  }

  //&:backdrop { background-color: $backdrop_menu_color; }

  menuitem {
    min-height: 16px;
    min-width: 40px;
    padding: 4px 6px;
    text-shadow: none;

    &:hover {
      color: gtk("@theme_selected_fg_color");
      background-color: gtk("@theme_selected_bg_color");
    }

    &:disabled {
      color: gtk("@insensitive_fg_color");
      &:backdrop { color: gtkdarken(gtk("@theme_unfocused_bg_color"), 15%); }
    }

    &:backdrop,
    &:backdrop:hover {
      color: gtk("@theme_unfocused_fg_color");
      background-color: transparent;
    }

    // submenu indicators
    arrow {
      min-height: 16px;
      min-width: 16px;

      &:dir(ltr) {
        -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
        margin-left: 10px;
      }

      &:dir(rtl) {
        -gtk-icon-source:-gtk-icontheme('pan-end-symbolic-rtl');
        margin-right: 10px;
      }
    }

    // avoids labels color being overridden, see
    // https://bugzilla.gnome.org/show_bug.cgi?id=767058
    label { &:dir(rtl), &:dir(ltr) { color: inherit; }}
  }

  // overflow arrows
  > arrow {
    @include button(undecorated);

    min-height: 16px;
    min-width: 16px;
    padding: 4px;
    background-color: gtkalpha(gtk("@theme_base_color"), 0.9);
    border-radius: 0;

    &.top {
      margin-top: -4px;
      border-bottom: 1px solid gtkmix(gtk("@theme_fg_color"), gtk("@theme_base_color"), 10%);
      border-top-right-radius: $menu_radius;
      border-top-left-radius: $menu_radius;
      -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
    }

    &.bottom {
      margin-top: 8px;
      margin-bottom: -12px;
      border-top: 1px solid gtkmix(gtk("@theme_fg_color"), gtk("@theme_base_color"), 10%);
      border-bottom-right-radius: $menu_radius;
      border-bottom-left-radius: $menu_radius;
      -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    }

    &:hover { background-color: gtkmix(gtk("@theme_fg_color"), gtk("@theme_base_color"), 10%); }

    //&:backdrop { background-color: $backdrop_menu_color; }

    &:disabled {
      color: transparent;
      background-color: transparent;
      border-color: transparent ;
    }
  }
}

menuitem {
  accelerator { color: gtkalpha(currentColor,0.55); }

  check,
  radio {
    min-height: 16px;
    min-width: 16px;

    &:dir(ltr) { margin-right: 7px; }
    &:dir(rtl) { margin-left: 7px; }
  }
}

/***************
 * Popovers   *
 ***************/

popover.background {
  padding: 2px;
  background: gtkalpha(gtk("@theme_base_color"), 0.9) linear-gradient(to bottom left, transparent, rgba(0, 0, 0, 0.03), rgba(0, 0, 0, 0.12));

  .csd &, & {
    border: 1px solid rgba(0,0,0,0.17);
    border-radius: $popover_radius;
  }

  box-shadow: 0 1px 2px gtkalpha(black, 0.3);

  &:backdrop {
    background-color: gtk("@theme_unfocused_bg_color");
    box-shadow: none;
  }

  > list,
  > .view,
  > toolbar {
    border-style: none;
    background-color: transparent;
  }

  .csd &, & {
    &.touch-selection,
    &.magnifier {
      @extend %osd;

      border: 1px solid gtkalpha(white, 0.2);

      button { @extend %osd_button };
    }

    &.osd { @extend %osd; }
  }

  separator { margin: 3px; }

  list separator { margin: 0px; }
}

/*************
 * Notebooks *
 *************/
notebook {
  > header {
    padding: 1px;
    border-color: rgba(0,0,0,0.17);
    border-width: 1px;
    background-color: gtk("@theme_base_color");

    &:backdrop {
      border-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%);
      background-color: gtk("@theme_unfocused_base_color");
    }

    tabs { margin: -1px; }

    &.top {
      border-bottom-style: solid;
      > tabs {
        margin-bottom: -2px;
        > tab {
          &:hover { box-shadow: inset 0 -3px rgba(0,0,0,0.17); }

          &:backdrop { box-shadow: none; }

          &:checked { box-shadow: inset 0 -3px gtk("@theme_selected_bg_color"); }
        }
      }
    }

    &.bottom {
      border-top-style: solid;
      > tabs {
        margin-top: -2px;
        > tab {
          &:hover { box-shadow: inset 0 3px rgba(0,0,0,0.17); }

          &:backdrop { box-shadow: none; }

          &:checked { box-shadow: inset 0 3px gtk("@theme_selected_bg_color"); }
        }
      }
    }

    &.left {
      border-right-style: solid;
      > tabs {
        margin-right: -2px;
        > tab {
          &:hover { box-shadow: inset -3px 0 rgba(0,0,0,0.17); }

          &:backdrop { box-shadow: none; }

          &:checked { box-shadow: inset -3px 0 gtk("@theme_selected_bg_color"); }
        }
      }
    }

    &.right {
      border-left-style: solid;
      > tabs {
        margin-left: -2px;
        > tab {
          &:hover { box-shadow: inset 3px 0 rgba(0,0,0,0.17); }

          &:backdrop { box-shadow: none; }

          &:checked { box-shadow: inset 3px 0 gtk("@theme_selected_bg_color"); }
        }
      }
    }

    &.top > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-top-style: none;
    }

    &.bottom > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-bottom-style: none;
    }

    @at-root %notebook_vert_arrows {
      margin-left: -5px;
      margin-right: -5px;
      padding-left: 4px;
      padding-right: 4px;

      &.down { -gtk-icon-source: -gtk-icontheme('pan-start-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }
    }

    &.left > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-left-style: none;
    }

    &.right > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-right-style: none;
    }

    @at-root %notebook_horz_arrows {
      margin-top: -5px;
      margin-bottom: -5px;
      padding-top: 4px;
      padding-bottom: 4px;

      &.down { -gtk-icon-source: -gtk-icontheme('pan-up-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
    }

    > tabs > arrow {
      @extend %button_basic;

      @extend %button_basic.flat;

      min-height: 16px;
      min-width: 16px;
      border-radius: 0;

      &:hover:not(:active):not(:backdrop) {
        background-clip: padding-box;
        background-image: none;
        background-color: gtkalpha(white, 0.3);
        border-color: transparent;
        box-shadow: none;
      }

      &:disabled { @include button(undecorated); }
    }

    tab {
      min-height: 30px;
      min-width: 30px;
      padding: 3px 12px;

      outline-offset: -5px;

      color: gtk("@insensitive_fg_color");
      font-weight: bold;

      border-width: 1px;         // for reorderable tabs
      border-color: transparent; //

      &:hover {
        color: gtkmix(gtk("@insensitive_fg_color"), gtk("@theme_fg_color"), 50%);

        &.reorderable-page {
          border-color: gtkalpha(rgba(0,0,0,0.17), 0.3);
          background-color: gtkalpha(gtk("@theme_bg_color"), 0.2);
        }
      }

      &:backdrop {
        color: gtkmix(gtk("@theme_unfocused_fg_color"), gtk("@theme_unfocused_bg_color"), 60%);

        &.reorderable-page {
          border-color: transparent;
          background-color: transparent;
        }
      }

      &:checked {
        color: gtk("@theme_fg_color");
        &.reorderable-page {
          border-color: gtkalpha(rgba(0,0,0,0.17), 0.5);
          background-color: gtkalpha(gtk("@theme_bg_color"), 0.5);

          &:hover { background-color: gtkalpha(gtk("@theme_bg_color"), 0.7); }
        }
      }

      &:backdrop:checked {
        color: gtk("@theme_unfocused_fg_color");

        &.reorderable-page {
          border-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%);
          background-color: gtk("@theme_unfocused_bg_color");
        }
      }

      // colors the button like the label, overridden otherwise
      button.flat {
        &:hover { color: currentColor; }

        &, &:backdrop { color: gtkalpha(currentColor, 0.3); }

        padding: 0;
        margin-top: 4px;
        margin-bottom: 4px;
        // FIXME: generalize .small-button?
        min-width: 20px;
        min-height: 20px;

        &:last-child {
          margin-left: 4px;
          margin-right: -4px;
        }

        &:first-child {
          margin-left: -4px;
          margin-right: 4px;
        }
      }
    }

    &.top,
    &.bottom {
      tabs {
        padding-left: 4px;
        padding-right: 4px;

        &:not(:only-child) {
          margin-left: 3px;
          margin-right: 3px;

          &:first-child { margin-left: -1px; }
          &:last-child { margin-right: -1px; }
        }

        tab {
          margin-left: 4px;
          margin-right: 4px;

          &.reorderable-page { border-style: none solid; }
        }
      }
    }

    &.left,
    &.right {
      tabs {
        padding-top: 4px;
        padding-bottom: 4px;

        &:not(:only-child) {
          margin-top: 3px;
          margin-bottom: 3px;

          &:first-child { margin-top: -1px; }
          &:last-child { margin-bottom: -1px; }
        }

        tab {
          margin-top: 4px;
          margin-bottom: 4px;

          &.reorderable-page { border-style: solid none; }
        }
      }
    }

    &.top tab { padding-bottom: 4px; }
    &.bottom tab { padding-top: 4px; }
  }

  > stack:not(:only-child) { // the :not(:only-child) is for "hidden" notebooks
    background-color: gtk("@theme_base_color");

    &:backdrop { background-color: gtk("@theme_unfocused_base_color"); }
  }
}


/**************
 * Scrollbars *
 **************/
scrollbar {
  $_slider_min_length: 40px;

  // disable steppers
  @at-root * {
    -GtkScrollbar-has-backward-stepper: false;
    -GtkScrollbar-has-forward-stepper: false;
  }

  background-color: gtk("@theme_bg_color");
  transition: 300ms $ease-out-quad;

  // scrollbar border
  &.top { border-bottom: 1px solid rgba(0,0,0,0.17); }
  &.bottom { border-top: 1px solid rgba(0,0,0,0.17); }
  &.left { border-right: 1px solid rgba(0,0,0,0.17); }
  &.right { border-left: 1px solid rgba(0,0,0,0.17); }

  &:backdrop {
    background-color: gtk("@theme_unfocused_bg_color");
    border-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%);
    transition: $backdrop_transition;
  }

  // slider
  slider {
    min-width: 6px;
    min-height: 6px;
    margin: -1px;
    border: 4px solid transparent;
    border-radius: 8px;
    background-clip: padding-box;
    background-color: gtkmix(gtk("@theme_fg_color"), gtk("@theme_bg_color"), 60%);

    &:hover { background-color: gtk("@theme_selected_bg_color"); }

    &:hover:active { background-color: gtk("@theme_selected_bg_color"); }

    &:backdrop { background-color: gtkmix(gtk("@theme_fg_color"), gtk("@theme_bg_color"), 50%); }

    &:disabled { background-color: transparent; }
  }

  &.fine-tune {
    slider {
      min-width: 4px;
      min-height: 4px;
    }

    &.horizontal slider { border-width: 5px 4px; }
    &.vertical slider { border-width: 4px 5px; }
  }

  &.overlay-indicator {
    &:not(.dragging):not(.hovering) {
      border-color: transparent;
      opacity: 0.4;
      background-color: transparent;

      slider {
        margin: 0;
        min-width: 3px;
        min-height: 3px;
        background-color: gtk("@theme_fg_color");
        border: 1px solid white;
      }

      button {
        min-width: 5px;
        min-height: 5px;
        background-color: gtk("@theme_fg_color");
        background-clip: padding-box;
        border-radius: 100%;
        border: 1px solid white;
        -gtk-icon-source: none;
      }

      &.horizontal {
        slider {
          margin: 0 2px;
          min-width: $_slider_min_length;
        }

        button {
          margin: 1px 2px;
          min-width: 5px;
        }
      }

      &.vertical {
        slider {
          margin: 2px 0;
          min-height: $_slider_min_length;
        }

        button {
          margin: 2px 1px;
          min-height: 5px;
        }
      }
    }

    &.dragging,
    &.hovering { opacity: 0.8; }
  }

  &.horizontal slider { min-width: $_slider_min_length; }

  &.vertical slider { min-height: $_slider_min_length; }

  // button styling
  button {
    padding: 0;
    min-width: 12px;
    min-height: 12px;
    border-style: none;
    border-radius: 0;
    transition-property: min-height, min-width, color;

    @include button(undecorated);

    color: gtkmix(gtk("@theme_fg_color"), gtk("@theme_bg_color"), 60%);

    &:hover {
      @include button(undecorated);

      color: gtk("@theme_selected_bg_color");
    }
    &:active, &:checked {
      @include button(undecorated);

      color: gtk("@theme_selected_bg_color");
    }
    &:disabled {
      @include button(undecorated);

      color: gtkalpha(gtkmix(gtk("@theme_fg_color"), gtk("@theme_bg_color"), 60%), 0.2);
    }
    &:backdrop {
      @include button(undecorated);

      color: gtkmix(gtk("@theme_fg_color"), gtk("@theme_bg_color"), 50%);

      &:disabled {
        @include button(undecorated);

        color: gtkalpha(gtkmix(gtk("@theme_fg_color"), gtk("@theme_bg_color"), 50%), 0.2);
      }
    }
  }

  // button icons
  &.vertical {
    button {
      &.down { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-up-symbolic'); }
    }
  }

  &.horizontal {
    button {
      &.down { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-start-symbolic'); }
    }
  }
}

treeview ~ scrollbar.vertical {
  border-top: 1px solid rgba(0,0,0,0.17);
  margin-top: -1px;
}

/**********
 * Switch *
 **********/
switch {
  outline-offset: -4px;

  // similar to the .scale
  border: 1px solid rgba(0,0,0,0.17);
  border-radius: 14px;
  color: transparent;
  background-color: gtk("@theme_bg_color");

  &:checked {
    color: transparent;
    border: 1px solid gtk("@theme_selected_bg_color") rgba(0,0,0,0.17);
    background-color: gtk("@theme_selected_bg_color");
  }

  &:disabled {
    color: transparent;
    border: 1px solid rgba(0,0,0,0.17);
    background-color: gtk("@insensitive_bg_color");
  }

  &:backdrop {
    color: transparent;
    border: 1px solid rgba(0,0,0,0.17);
    background-color: gtkshade(gtk("@theme_bg_color"), 1.4);
    transition: $backdrop_transition;

    &:checked {
      border: 1px solid gtk("@theme_selected_bg_color") rgba(0,0,0,0.12);
      background-color: gtkalpha(gtk("@theme_selected_bg_color"), 0.8);
    }

    &:disabled {
      color: transparent;
      border: 1px solid rgba(0,0,0,0.17);
      background-color: gtkshade(gtk("@insensitive_bg_color"), 1.4);
    }
  }

  slider {
    margin: -1px;
    min-width: 24px;
    min-height: 24px;
    border: 1px solid;
    border-radius: 50%;
    transition: $button_transition;
    -gtk-outline-radius: 20px;

    @include button(normal-alt, $edge: $_shadow_color);
  }
  
  image { color: transparent; } /* only show i / o for the accessible theme */

  &:hover slider {
    @include button(hover-alt, $edge: $_shadow_color);
  }

  &:checked > slider { border: 1px solid gtk("@theme_selected_bg_color") rgba(0,0,0,0.3); }

  &:disabled slider { @include button(insensitive); }

  &:backdrop {
    slider {
      transition: $backdrop_transition;

      @include button(backdrop);
    }

    &:checked > slider { border-color: gtk("@theme_unfocused_selected_bg_color") rgba(0,0,0,0.24); }

    &:disabled slider { @include button(backdrop-insensitive); }
  }

  row:selected & {
    box-shadow: none;
    border-color: gtk("@theme_selected_bg_color") rgba(0,0,0,0.3);

    &:backdrop { border-color: gtk("@theme_selected_bg_color") rgba(0,0,0,0.3); }

    > slider { &:checked, & { border-color: gtk("@theme_selected_bg_color") rgba(0,0,0,0.3); } }
  }

}


/*************************
 * Check and Radio items *
 *************************/
// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly


//selection-mode
@each $check_state, $check_icon, $check_color, $check_background in
  ('', 'none', 'transparent', gtk("@theme_selected_bg_color")),
  (':hover', 'none', 'transparent', gtk("@theme_selected_bg_color")),
  (':active', 'none', 'transparent', gtk("@theme_selected_bg_color")),
  (':backdrop', 'none', 'transparent', gtkalpha(gtk("@theme_selected_bg_color"), 0.8)),
  (':checked', '-gtk-icontheme(\'object-select-symbolic\')', gtk("@theme_fg_color"), gtk("@theme_selected_bg_color")),
  (':checked:hover', '-gtk-icontheme(\'object-select-symbolic\')', gtk("@theme_fg_color"), gtk("@theme_selected_bg_color")),
  (':checked:active', '-gtk-icontheme(\'object-select-symbolic\')', gtk("@theme_fg_color"), gtk("@theme_selected_bg_color")),
  (':backdrop:checked', '-gtk-icontheme(\'object-select-symbolic\')', '#{gtkalpha(gtk("@theme_fg_color"), 0.8)}', gtkalpha(gtk("@theme_selected_bg_color"), 0.8)), {

  .view.content-view.check#{$check_state}:not(list),
  .content-view .tile check#{$check_state}:not(list) {
    margin: 4px;
    min-width: 32px;
    min-height: 32px;
    color: #{$check_color};
    background-color: #{$check_background};
    border-radius: 5px;
    background-image: none;
    transition: 200ms;
    box-shadow: none;
    border-width: 0;
    -gtk-icon-source: #{$check_icon};
    -gtk-icon-shadow: none;
  }
}

checkbutton.text-button, radiobutton.text-button {
  // this is for a nice focus on check and radios text
  padding: 2px 0;
  outline-offset: 0;

  label:not(:only-child) {
    &:first-child { margin-left: 4px; }
    &:last-child { margin-right: 4px; }
  }
}

check,
radio {
  margin: 0 4px;

  &:only-child { margin: 0; }

  popover & { // when in a popover add more space between the label and the check, reset the other side margin.
              // See https://bugzilla.gnome.org/show_bug.cgi?id=779570 for details.
    &.left:dir(rtl) {
      margin-left: 0;
      margin-right: 12px;
    }

    &.right:dir(ltr) {
      margin-left: 12px;
      margin-right: 0;
    }
  }

  min-height: 14px;
  min-width: 14px;
  border: 1px solid;
  -gtk-icon-source: none;

  & {
    // for unchecked
    $_c: gtk("@theme_base_color");

    @each $state, $t in ("", "normal"),
                        (":hover", "hover"),
                        (":active", "active"),
                        (":disabled", "insensitive"),
                        (":backdrop", "backdrop"),
                        (":backdrop:disabled", 'backdrop-insensitive') {
      &#{$state} {
        @include check($t, $_c);
      }
    }
  }

  & {
    // for checked
    @each $t in (':checked'), (':indeterminate') {
      &#{$t} {
        @each $state, $t in ("", "normal"),
                            (":hover", "hover"),
                            (":active", "active"),
                            (":disabled", "insensitive"),
                            (":backdrop", "backdrop"),
                            (":backdrop:disabled", 'backdrop-insensitive') {
          &#{$state} {
            @include check($t, gtk("@theme_selected_bg_color"), gtk("@theme_selected_fg_color"), $checked: true);
          }
        }
      }
    }
  }

  &:backdrop { transition: $backdrop_transition; }
  
  // the borders of the light variant versions of checks and radios are too similar in luminosity to the selected background
  // color, hence we need special casing.
  row:selected & { border-color: gtk("@theme_selected_bg_color") rgba(0,0,0,0.3); }

  .osd & {
    @include button(osd);

    &:hover { @include button(osd); }
    &:active { @include button(osd-active); }
    &:backdrop { @include button(osd-backdrop); }
    &:disabled { @include button(osd-insensitive); }
  }

  menu menuitem & {
    margin: 0; // this is a workaround for a menu check/radio size allocation issue

    &, &:checked, &:indeterminate {
      &, &:hover, &:disabled { //FIXME use button reset mixin
        min-height: 14px;
        min-width: 14px;
        background-image: none;
        background-color: transparent;
        box-shadow: none;
        -gtk-icon-shadow: none;
        color: inherit;
        border-color: currentColor;
      }
    }
  }
}

%check,
check {
  border-radius: 3px;

  &:checked { -gtk-icon-source: image(-gtk-recolor(url("assets/check-symbolic.svg")),
                                      -gtk-recolor(url("assets/check-symbolic.symbolic.png"))); }

  &:indeterminate { -gtk-icon-source: image(-gtk-recolor(url("assets/dash-symbolic.svg")),
                                            -gtk-recolor(url("assets/dash-symbolic.symbolic.png"))); }
}

%radio,
radio {
  border-radius: 100%;

  &:checked { -gtk-icon-source: image(-gtk-recolor(url("assets/bullet-symbolic.svg")),
                                      -gtk-recolor(url("assets/bullet-symbolic.symbolic.png"))); }

  &:indeterminate { -gtk-icon-source: image(-gtk-recolor(url("assets/dash-symbolic.svg")),
                                            -gtk-recolor(url("assets/dash-symbolic.symbolic.png"))); }
}

// ANIMATION:
// this is made with those pretty convoluted transitions, since checks and radios have to animate only on state changes,
// the transformation is set on the active state and it get reset on the checked state.
radio:not(:indeterminate):not(:checked):active:not(:backdrop) { -gtk-icon-transform: scale(0); }

check:not(:indeterminate):not(:checked):active:not(:backdrop) { -gtk-icon-transform: translate(-6px, 3px) rotate(-45deg) scaleY(0.2) rotate(45deg) scaleX(0); }

radio,
check {
  &:active { -gtk-icon-transform: scale(0, 1); } // should tackle the indeterminate state, untested

  &:checked:not(:backdrop), &:indeterminate:not(:backdrop) {
    -gtk-icon-transform: unset;
    transition: 400ms;
  }
}

menu menuitem {
  radio,
  check {
     &:checked:not(:backdrop), &:indeterminate:not(:backdrop) { transition: none; }
  }
}

treeview.view check,
treeview.view radio {
  &:selected {
    &:focus, & {
      color: gtk("@theme_selected_fg_color");

      border-color: gtk("@theme_selected_bg_color") rgba(0,0,0,0.3);
    }
  }
}

treeview.view radio:selected { &:focus, & { @extend %radio; }} // This is a workaround


/************
 * GtkScale *
 ************/
%scale_trough {
  border: 1px solid rgba(0,0,0,0.17);
  border-radius: 3px;
  background-color: $border_darkening;

  &:disabled { background-color: gtk("@insensitive_bg_color"); }

  &:backdrop {
    background-color: $border_darkening;
    border-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%);
    transition: $backdrop_transition;

    &:disabled { background-color: gtk("@insensitive_bg_color"); }
  }

  // ...on selected list rows
  row:selected & { &:disabled, & { border-color: gtk("@theme_selected_bg_color") $border_darkening; }}

  // OSD
  .osd & {
    border-color: rgba(0,0,0,0.17);
    background-color: gtkalpha(rgba(0,0,0,0.17), 0.8);

    &:disabled { background-color: gtk("@insensitive_fg_color"); }
  }
}

%scale_highlight {
  border: 1px solid gtk("@theme_selected_bg_color") $border_darkening;
  border-radius: 3px;
  background-color: gtk("@theme_selected_bg_color");

  &:disabled {
    background-color: transparent;
    border-color: transparent;
  }

  &:backdrop {
    &:disabled {
      background-color: transparent;
      border-color: transparent;
    }
  }

  // ...on selected list rows
  row:selected & { &:disabled, & { border-color: gtk("@theme_selected_bg_color") $border_darkening; }}

  // OSD
  .osd & {
    border-color: rgba(0,0,0,0.17);

    &:disabled { border-color: transparent; }
  }
}

scale {
  // sizing
  $_marks_length: 6px;
  $_marks_distance: 6px;

  min-height: 10px;
  min-width: 10px;
  padding: 12px;

  // those are inside the trough node, I need them to show their own border over the trough one, so negative margin
  fill,
  highlight { margin: -1px; }

  // the slider is inside the trough, so to have make it bigger there's a negative margin

  slider {
    min-height: 18px;
    min-width: 18px;
    margin: -9px;
  }

  // click-and-hold the slider to activate
  &.fine-tune {
    &.horizontal {
      padding-top: 9px;
      padding-bottom: 9px;
      min-height: 16px;
    }

    &.vertical {
      padding-left: 9px;
      padding-right: 9px;
      min-width: 16px;
    }

    // to make the trough grow in fine-tune mode
    slider { margin: -6px; }

    fill,
    highlight,
    trough {
      border-radius: 5px;
      -gtk-outline-radius: 7px;
    }
  }

  // the backing bit
  trough {
    @extend %scale_trough;

    outline-offset: 2px;
    -gtk-outline-radius: 5px;
  }

  // the colored part of the backing bit
  highlight { @extend %scale_highlight; }

  // this is another differently styled part of the backing bit, the most relevant use case is for example
  // in media player to indicate how much video stream as been cached
  fill {
    @extend %scale_trough;

    &:backdrop, & { background-color: rgba(0,0,0,0.17); }

    &:disabled {
      &:backdrop, & {
        border-color: transparent;
        background-color: transparent;
      }
    }

    // OSD
    .osd & {
      background-color: gtkmix(gtk("@theme_fg_color"), rgba(0,0,0,0.17), 25%);

      &:disabled {
        &:backdrop, & {
          border-color: transparent;
          background-color: transparent;
        }
      }
    }
  }

  slider {
    @include button(normal-alt, $edge: $_shadow_color);

    border: 1px solid gtkdarken(rgba(0,0,0,0.17), 3%);
    border-radius: 100%;
    transition: $button_transition;
    transition-property: background, border, box-shadow;

    &:hover { @include button(hover-alt, $edge: $_shadow_color); }

    &:active { border-color: gtk("@theme_selected_bg_color"); }

    &:disabled { @include button(insensitive); }

    &:backdrop {
      transition: $backdrop_transition;

      @include button(backdrop);

      &:disabled { @include button(backdrop-insensitive); }
    }

    // ...on selected list rows
    row:selected & { &:disabled, & { border-color: gtk("@theme_selected_bg_color") $border_darkening; } }

    // OSD
    .osd & {
      @include button(osd);
      border-color: gtkdarken(rgba(0,0,0,0.17), 3%);
      background-color: gtkopacify(gtk("@theme_bg_color"), 1); // solid background needed here

      &:hover {
        @include button(osd-hover);
        background-color: gtkopacify(gtk("@theme_bg_color"), 1); // solid background needed here
      }

      &:active {
        @include button(osd-active);
        background-color: gtkopacify(gtk("@theme_bg_color"), 1); // solid background needed here
      }

      &:disabled {
        @include button(osd-insensitive);
        background-color: gtkopacify(gtk("@theme_bg_color"), 1); // solid background needed here
      }

      &:backdrop {
        @include button(osd-backdrop);
        background-color: gtkopacify(gtk("@theme_bg_color"), 1); // solid background needed here

        &:disabled {
          @include button(osd-backdrop-insensitive);
          background-color: gtkopacify(gtk("@theme_bg_color"), 1); // solid background needed here
        }
      }
    }
  }

  marks,
  value { color: gtkalpha(currentColor, 0.55); }

  //marks margins
  @each $scale_orient, $marks_class, $marks_pos, $marks_margin in (horizontal, top, top, bottom),
                                                                  (horizontal, bottom, bottom, top),
                                                                  (vertical, top, left, right),
                                                                  (vertical, bottom, right, left) {
    &.#{$scale_orient} marks {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length);
      }
    }

    &.#{$scale_orient}.fine-tune marks {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length - 3px);
      }
    }
  }

  &.horizontal {
    indicator {
      min-height: $_marks_length;
      min-width: 1px;
    }

    &.fine-tune indicator { min-height: ($_marks_length - 3px); }
  }

  &.vertical {
    indicator {
      min-height: 1px;
      min-width: $_marks_length;
    }

    &.fine-tune indicator { min-width: ($_marks_length - 3px); }
  }

  // *WARNING* scale with marks madness following

  // FIXME: OSD and selected list rows missing, I don't feel like adding the other 144 assets needed for those...
  $suffix: '';

  @each $dir_class, $dir_infix in ('horizontal', 'horz'),
                                  ('vertical', 'vert') {
    @each $marks_infix, $marks_class in ('scale-has-marks-above', 'marks-before:not(.marks-after)'),
                                        ('scale-has-marks-below', 'marks-after:not(.marks-before)') {
      @each $state, $state_infix in ('', ''),
                                    (':hover', '-hover'),
                                    (':active', '-active'),
                                    (':disabled', '-insensitive'),
                                    (':backdrop', '-backdrop'),
                                    (':backdrop:disabled', '-backdrop-insensitive') {
        &.#{$dir_class}.#{$marks_class} {

          slider {
            &#{$state} {
              // an asymmetric slider asset is used here, so the margins are uneven, the smaller
              // margin is set on the point side.
              margin: -10px;
              $_scale_asset: 'assets/slider-#{$dir_infix}-#{$marks_infix}#{$state_infix}#{$suffix}';
              border-style: none;
              border-radius: 0;

              background-color: transparent;
              background-image: -gtk-scaled(url('#{$_scale_asset}.png'), url('#{$_scale_asset}@2.png'));

              $_scale_slider_bg_pos: bottom;

              @if $dir_class == 'horizontal' {
                min-height: 26px;
                min-width: 22px;

                @if $marks_infix == 'scale-has-marks-above' {
                  margin-top: -14px;

                  $_scale_slider_bg_pos: top;
                }

                @else { margin-bottom: -14px; }
              }

              @else {
                min-height: 22px;
                min-width: 26px;

                @if $marks_infix == 'scale-has-marks-above' {
                  margin-left: -14px;

                  $_scale_slider_bg_pos: left bottom;
                }

                @else {
                  margin-right: -14px;

                  $_scale_slider_bg_pos: right bottom;
                }
              }

              background-position: $_scale_slider_bg_pos;
              background-repeat: no-repeat;
              box-shadow: none;
            }
          }

          &.fine-tune slider {
            // bigger negative margins to make the trough grow here as well
            margin: -7px;

            @if $dir_class == 'horizontal' {
              @if $marks_infix == 'scale-has-marks-above' { margin-top: -11px; }

              @else { margin-bottom: -11px; }
            }

            @else {
              @if $marks_infix == 'scale-has-marks-above' { margin-left: -11px; }

              @else { margin-right: -11px; }
            }
          }
        }
      }
    }
  }

  &.color {
    min-height: 0;
    min-width: 0;

    trough {
      background-image: image(rgba(0,0,0,0.17));
      background-repeat: no-repeat;
    }

    &.horizontal {
      padding: 0 0 15px 0;

      trough {
        padding-bottom: 4px;
        background-position: 0 -3px;
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }

      slider {
        &:dir(ltr), &:dir(rtl) { // specificity bumb
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-bottom: -15px;
            margin-top: 6px;
          }
        }
      }
    }

    &.vertical {
      &:dir(ltr) {
        padding: 0 0 0 15px;

        trough {
          padding-left: 4px;
          background-position: 3px 0;
          border-bottom-right-radius: 0;
          border-top-right-radius: 0;
        }

        slider {
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-left: -15px;
            margin-right: 6px;
          }
        }
      }

      &:dir(rtl) {
        padding: 0 15px 0 0;

        trough {
          padding-right: 4px;
          background-position: -3px 0;
          border-bottom-left-radius: 0;
          border-top-left-radius: 0;
        }

        slider {
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-right: -15px;
            margin-left: 6px;
          }
        }
      }
    }

    &.fine-tune {
      &.horizontal {
        &:dir(ltr), &:dir(rtl) { // specificity bump
          padding: 0 0 12px 0;

          trough {
            padding-bottom: 7px;
            background-position: 0 -6px;
          }

          slider {
            margin-bottom: -15px;
            margin-top: 6px;
          }
        }
      }

      &.vertical {
        &:dir(ltr) {
          padding: 0 0 0 12px;

          trough {
            padding-left: 7px;
            background-position: 6px 0;
          }

          slider {
            margin-left: -15px;
            margin-right: 6px;
          }
        }

        &:dir(rtl) {
          padding: 0 12px 0 0;

          trough {
            padding-right: 7px;
            background-position: -6px 0;
          }

          slider {
            margin-right: -15px;
            margin-left: 6px;
          }
        }
      }
    }
  }
}


/*****************
 * Progress bars *
 *****************/
progressbar {
  // sizing
  &.horizontal {
    trough,
    progress { min-height: 2px; }
  }

  &.vertical {
    trough,
    progress { min-width: 2px; }
  }

  &.horizontal progress { margin: 0 -1px; } // the progress node is positioned after the trough border
  &.vertical progress { margin: -1px 0; }   // this moves it over it.


  // FIXME: insensitive state missing and some other state should be set probably
  font-size: smaller;
  color: gtkalpha(gtk("@theme_fg_color"), 0.4);

  &:backdrop {
    box-shadow: none;
    transition: $backdrop_transition;
  }

  trough { @extend %scale_trough; }

  progress {
    @extend %scale_highlight;

    border-radius: 1.5px;

    &.left {
      border-top-left-radius: 2px;
      border-bottom-left-radius: 2px;
    }

    &.right {
      border-top-right-radius: 2px;
      border-bottom-right-radius: 2px;
    }

    &.top {
      border-top-right-radius: 2px;
      border-top-left-radius: 2px;
    }

    &.bottom {
      border-bottom-right-radius: 2px;
      border-bottom-left-radius: 2px;
    }
  }

  &.osd { // progressbar.osd used for epiphany page loading progress
    min-width: 3px;
    min-height: 3px;
    background-color: transparent;

    trough {
      border-style: none;
      border-radius: 0;
      background-color: transparent;
      box-shadow: none;
    }

    progress {
      border-style: none;
      border-radius: 0;
    }
  }

  trough.empty progress { all: unset; } // makes the progress indicator disappear, when the fraction is 0
}


/*************
 * Level Bar *
 *************/
levelbar {
  &.horizontal {
    block {
      min-height: 1px;
    }

    &.discrete block {
      margin: 0 1px;
      min-width: 32px;
    }
  }

  &.vertical {
    block {
      min-width: 1px;
    }

    &.discrete block {
      margin: 1px 0;
      min-height: 32px;
    }
  }

  &:backdrop { transition: $backdrop_transition; }

  trough {
    border: 1px solid;
    padding: 2px;
    border-radius: 3px;
    @include entry(normal);

    &:backdrop { @include entry(backdrop); }
  }

  block {
    border: 1px solid;
    border-radius: 1px;

    &.low {
      border-color: gtk("@error_color") rgba(0, 0, 0, 0.2);
      background-color: gtk("@error_color");

      &:backdrop { border-color: gtk("@error_color_backdrop"); };
    }

    &.high,
    &:not(.empty) {
      border-color: gtk("@warning_color") rgba(0, 0, 0, 0.2);
      background-color: gtk("@warning_color");

      &:backdrop { border-color: gtk("@warning_color_backdrop"); }
    }

    &.full {
      border-color: gtk("@success_color") rgba(0, 0, 0, 0.2);
      background-color: gtk("@success_color");

      &:backdrop { border-color: gtk("@success_color_backdrop"); };
    }

    &.empty {
      background-color: transparent;
      border-color: gtkalpha(gtk("@theme_fg_color"), 0.2);

      &:backdrop { border-color: gtkalpha(gtk("@theme_unfocused_fg_color"), 0.15); }
    }
  }
}


/****************
 * Print dialog *
*****************/
printdialog {
  paper {
    color: gtk("@theme_fg_color");
    border: 1px solid rgba(0,0,0,0.17);
    background: white;
    padding: 0;

    &:backdrop {
      color: gtk("@theme_unfocused_fg_color");
      border-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%);
    }
  }

  .dialog-action-box { margin: 12px; }
}


/**********
 * Frames *
 **********/
frame > border,
.frame {
  box-shadow: none;
  margin: 0;
  padding: 0;
  border-radius: 0;
  border: 1px solid rgba(0,0,0,0.17);

  &:backdrop { border-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%); }
}

actionbar > revealer >  box {
  padding: 6px;
  border-top: 1px solid rgba(0,0,0,0.17);

  &:backdrop { border-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%); }
}

scrolledwindow {
  viewport.frame { // avoid double borders when viewport inside scrolled window
    border-style: none;
  }

  // This is used when content is touch-dragged past boundaries.
  // draws a box on top of the content, the size changes programmatically.
  overshoot {
    &.top {
      @include overshoot(top);

      &:backdrop { @include overshoot(top, backdrop); }
    }

    &.bottom {
      @include overshoot(bottom);

      &:backdrop { @include overshoot(bottom, backdrop); }
    }

    &.left {
      @include overshoot(left);

      &:backdrop { @include overshoot(left, backdrop); }
    }

    &.right {
      @include overshoot(right);

      &:backdrop { @include overshoot(right, backdrop); }
    }
  }


  junction { // the small square between two scrollbars
    border-color: transparent;
    // the border image is used to add the missing dot between the borders, details, details, details...
    border-image: linear-gradient(to bottom, rgba(0,0,0,0.17) 1px, transparent 1px) 0 0 0 1 / 0 1px stretch;
    background-color: gtk("@theme_bg_color");

    &:dir(rtl) { border-image-slice: 0 1 0 0; }

    &:backdrop {
      border-image-source: linear-gradient(to bottom, gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%) 1px, transparent 1px);
      background-color: gtk("@theme_unfocused_bg_color");
      transition: $backdrop_transition;
    }
  }
}

//vbox and hbox separators
separator {
  background: gtkalpha(black, 0.2);
  min-width: 1px;
  min-height: 1px;
}


/*********
 * Lists *
 *********/
list {
  color: gtk("@theme_text_color");
  background-color: gtk("@theme_base_color");
  border-color: rgba(0,0,0,0.17);

  &:backdrop {
    background-color: gtk("@theme_unfocused_base_color");
    border-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%);
  }

  row { padding: 2px; }
}

row {
  transition: all 150ms $ease-out-quad;

  &:hover { transition: none; }

  &:backdrop { transition: $backdrop_transition; }

  &.activatable {
    &.has-open-popup, // this is for indicathing which row generated a popover see https://bugzilla.gnome.org/show_bug.cgi?id=754411

    &:hover { background-color: gtkalpha(gtk("@theme_fg_color"), 0.1); }

    &:active { box-shadow: inset 0 2px 2px -2px gtkalpha(black, 0.2); }

    &:backdrop:hover { background-color: transparent; }

    &:selected {
      &:active { box-shadow: inset 0 2px 3px -1px gtkalpha(black, 0.5); }

      &.has-open-popup,
      &:hover { background-color: gtkmix(gtk("@theme_fg_color"), gtk("@theme_selected_bg_color"), 10%); }

      &:backdrop { background-color: gtk("@theme_selected_bg_color"); }
    }
  }

  &:selected { @extend %selected_items; }
}


/*********************
 * App Notifications *
 *********************/
.app-notification,
.app-notification.frame {
  @extend %osd;

  padding: 10px;
  border-radius: 0 0 5px 5px;
  background-color: gtk("@theme_bg_color");
  background-image: linear-gradient(to bottom, gtkalpha(black, 0.2),
                                               rgba(0, 0, 0, 0) 2px);
  background-clip: padding-box;

  &:backdrop {
    background-image: none;
    transition: $backdrop_transition;
  }

  button { @extend %osd_button; }

  border { border: none; }
}


/*************
 * Expanders *
 *************/
expander {
  title > arrow {
    min-width: 16px;
    min-height: 16px;
    -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

    &:hover { color: gtklighten(gtk("@theme_fg_color"),30%); } //only lightens the arrow
    &:disabled { color: gtk("@insensitive_fg_color"); }
    &:disabled:backdrop { color: gtkdarken(gtk("@theme_unfocused_bg_color"), 15%); }

    &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
  }
}


/************
 * Calendar *
 ***********/
calendar {
  color: gtk("@theme_text_color");
  border: 1px solid rgba(0,0,0,0.17);

  &:selected {
    @extend %selected_items;

    border-radius: 4px;
  }

  &.header {
    border-bottom-color: gtkalpha(black, 0.2);

    &:backdrop { border-bottom-color: gtkalpha(black, 0.2); }
  }

  &.button {
    @extend %undecorated_button;

    color: gtkalpha(gtk("@theme_fg_color"), 0.45);

    &:hover { color: gtk("@theme_fg_color"); }

    &:backdrop { color: gtkalpha(gtk("@theme_unfocused_fg_color"),0.45); }

    &:disabled { color:  gtkalpha(gtk("@insensitive_fg_color"),0.45); }
  }

  &.highlight {
    color: gtk("@insensitive_fg_color");

    &:backdrop { color: gtkdarken(gtk("@theme_unfocused_bg_color"), 15%); }
  }

  &:backdrop {
    color: gtk("@theme_unfocused_text_color");
    border-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%);
  }

  &:indeterminate { color: gtkalpha(currentColor, 0.1); }
}


/***********
 * Dialogs *
 ***********/
messagedialog { // Message Dialog styling
  .titlebar {
    min-height: 20px;
    background-image: none;
    background-color: gtk("@theme_bg_color");
    border-style: none;
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
  }

  &.csd { // rounded bottom border styling for csd version
    &.background {
      // bigger radius for better antialiasing
      border-bottom-left-radius: $window_radius;
      border-bottom-right-radius: $window_radius;
    }

    .dialog-action-area button {
      padding: 10px 14px; // labels are not vertically centered on message dialog, this is a workaround
      border-radius: 0;
      border-left-style: solid;
      border-right-style: none;
      border-bottom-style: none;

      &:first-child{
        border-left-style: none;
        border-bottom-left-radius: 7px;
        -gtk-outline-bottom-left-radius: 5px;
      }

      &:last-child {
        border-bottom-right-radius: 7px;
        -gtk-outline-bottom-right-radius: 5px;
      }
    }
  }
}

filechooser {
  .dialog-action-box {
    border-top: 1px solid rgba(0,0,0,0.17);

    &:backdrop { border-top-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%); }
  }

  #pathbarbox { border-bottom: 1px solid gtk("@theme_bg_color"); }
}

filechooserbutton:drop(active) {
  box-shadow: none;
  border-color: transparent;
}


/***********
 * Sidebar *
 ***********/
.sidebar {
  border-style: none;
  background-color: gtkmix(gtk("@theme_bg_color"), gtk("@theme_base_color"), 50%);

  &:not(separator) {
    @at-root %sidebar_left,
    &:dir(ltr),
    &.left,
    &.left:dir(rtl) {
      border-right: 1px solid rgba(0,0,0,0.17);
      border-left-style: none;
    }

    @at-root %sidebar_right,
    &:dir(rtl),
    &.right {
      border-left: 1px solid rgba(0,0,0,0.17);
      border-right-style: none;
    }
  }

  &:backdrop {
    background-color: gtkmix(gtk("@theme_unfocused_bg_color"), gtk("@theme_unfocused_base_color"), 50%);
    border-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%);
    transition: $backdrop_transition;
  }

  list { background-color: transparent; }

  paned & { &.left, &.right, &.left:dir(rtl), &:dir(rtl), &:dir(ltr), & { border-style: none; }}
}

stacksidebar {
  &.sidebar {
    &:dir(ltr),
    &.left,
    &.left:dir(rtl) { list { @extend %sidebar_left; }}

    &:dir(rtl),
    &.right { list { @extend %sidebar_right; }}
  }

  row {
    padding: 10px 4px;

    > label {
      padding-left: 6px;
      padding-right: 6px;
    }

    &.needs-attention > label {
      @extend %needs_attention;

      background-size: 6px 6px, 0 0;
    }
  }
}

separator.sidebar {
  background-color: rgba(0,0,0,0.17);

  &:backdrop {
    background-color: gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%);
  }

  &.selection-mode,
  .selection-mode & {
    background-color: gtkdarken(gtk("@theme_selected_bg_color"), 20%);
  }
}

.sidebar.frame {
    border-width: 0 1px 0 0;
}

.sidebar .frame {
    border: none;
}


/****************
 * File chooser *
 ****************/
$_placesidebar_icons_opacity: 0.7;

row image.sidebar-icon { opacity: $_placesidebar_icons_opacity; } // dim the sidebar icons
                                                                  // see bug #786613 for details 
                                                                  // on this oddity

placessidebar {
  > viewport.frame { border-style: none; }

  row {
    // Needs overriding of the GtkListBoxRow padding
    min-height: 36px;
    padding: 0px;

    // Using margins/padding directly in the SidebarRow
    // will make the animation of the new bookmark row jump
    > revealer { padding: 0 14px; }

    &:selected { color: gtk("@theme_selected_fg_color"); }

    &:disabled { color: gtk("@insensitive_fg_color"); }

    &:backdrop {
      color: gtk("@theme_unfocused_fg_color");

      &:selected { color: gtkalpha(gtk("@theme_selected_fg_color"), 0.8); }

      &:disabled { color: gtk("@theme_unfocused_bg_color"); }
    }

    image.sidebar-icon {
      &:dir(ltr) { padding-right: 8px; }
      &:dir(rtl) { padding-left: 8px; }
    }

    label.sidebar-label {
      &:dir(ltr) { padding-right: 2px; }
      &:dir(rtl) { padding-left: 2px; }
    }

    @at-root button.sidebar-button {
      @extend %button_basic.flat;

      @extend %button_selected.flat;

      min-height: 26px;
      min-width: 26px;
      margin-top: 3px;
      margin-bottom: 3px;
      padding: 0;
      border-radius: 100%;
      -gtk-outline-radius: 100%;

      &:not(:hover):not(:active),
      &:backdrop { > image { opacity: $_placesidebar_icons_opacity; }}
    }

    // in the sidebar case it makes no sense to click the selected row
    &:selected:active { box-shadow: none; }

    &.sidebar-placeholder-row {
      padding: 0 8px;
      min-height: 2px;
      background-image: image(gtk("@theme_selected_bg_color"));
      background-clip: content-box;
    }

    &.sidebar-new-bookmark-row { color: gtk("@theme_selected_bg_color"); }

    &:drop(active):not(:disabled) {
      color: gtk("@theme_selected_bg_color");
      box-shadow: inset 0 1px gtk("@theme_selected_bg_color"),
                  inset 0 -1px gtk("@theme_selected_bg_color");

      &:selected {
        color: gtk("@theme_selected_fg_color");
        background-color: gtk("@theme_selected_bg_color");
      }
    }
  }
}

placesview {
  .server-list-button > image {
    transition: 200ms $ease-out-quad;
    -gtk-icon-transform: rotate(0turn);
  }

  .server-list-button:checked > image {
    transition: 200ms $ease-out-quad;
    -gtk-icon-transform: rotate(-0.5turn);
  }

  row.activatable:hover { background-color: transparent; }

  // this selects the "connect to server" label
  > actionbar > revealer > box > label {
    padding-left: 8px;
    padding-right: 8px;
  }
}


/*********
 * Paned *
 *********/
paned {
  > separator {
    min-width: 1px;
    min-height: 1px;
    -gtk-icon-source: none; // defeats the ugly default handle decoration
    border-style: none; // just to be sure
    background-color: transparent;
    // workaround, using background istead of a border since the border will get rendered twice (?)
    background-image: image(rgba(0,0,0,0.17));
    background-size: 1px 1px;

    &:selected { background-image: image(gtk("@theme_selected_bg_color")); } // FIXME is this needed?

    &:backdrop { background-image: image(gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%)); }

    &.wide {
      min-width: 5px;
      min-height: 5px;
      background-color: gtk("@theme_bg_color");
      background-image: image(rgba(0,0,0,0.17)), image(rgba(0,0,0,0.17));
      background-size: 1px 1px, 1px 1px;

      &:backdrop {
        background-color: gtk("@theme_unfocused_bg_color");
        background-image: image(gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%)),
                          image(gtkmix(rgba(0,0,0,0.17), gtk("@theme_bg_color"), 80%));
      }
    }
  }

  &.horizontal > separator {
    background-repeat: repeat-y;

    &:dir(ltr) {
      margin: 0 -8px 0 0;
      padding: 0 8px 0 0;
      background-position: left;
    }
    &:dir(rtl) {
      margin: 0 0 0 -8px;
      padding: 0 0 0 8px;
      background-position: right;
    }

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-y, repeat-y;
      background-position: left, right;
    }
  }

  &.vertical > separator {
    margin: 0 0 -8px 0;
    padding: 0 0 8px 0;
    background-repeat: repeat-x;
    background-position: top;

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-x, repeat-x;
      background-position: bottom, top;
    }
  }
}


/**************
 * GtkInfoBar *
 **************/
infobar {
  border-style: none;
  
  &.info,
  &.question {
    color: gtk("@theme_selected_fg_color");
    label, & { color: gtk("@theme_selected_fg_color"); }
    background: gtk("@theme_selected_bg_color") linear-gradient(to bottom, rgba(0, 0, 0, 0.11), rgba(0, 0, 0, 0.16));
        
    &:backdrop {
      color: gtkalpha(gtk("@theme_selected_fg_color"), 0.8);
      label, & { color: gtkalpha(gtk("@theme_selected_fg_color"), 0.8); }
      background: gtkalpha(gtk("@theme_selected_bg_color"), 0.8);
    }
    
    button {
      // FIXME: extend selection mode buttons
      @include button(normalib, transparent, gtk("@theme_selected_fg_color"), none);
      color: gtk("@theme_selected_fg_color");

      &:hover { @include button(hoverib, transparent, gtk("@theme_selected_fg_color"), none); }

      &:active,
      &:checked { @include button(activeib,transparent, gtk("@theme_selected_fg_color"), none); }

      &:disabled { @include button(insensitiveib, transparent, gtk("@theme_selected_fg_color"), none); }

      &:backdrop {
        @include button(backdropib, transparent, gtkalpha(gtk("@theme_selected_fg_color"), 0.8), none);

        &:disabled {
          @include button(backdropinsensitiveib, transparent, gtkalpha(gtk("@theme_selected_fg_color"), 0.8), none);
        }
      }
    }
  }
  &.warning {
    color: white;
    label, & { color: white; }
    background: gtk("@warning_color") linear-gradient(to bottom, rgba(0, 0, 0, 0.11), rgba(0, 0, 0, 0.16));
        
    &:backdrop {
      color: gtkalpha(white, 0.8);
      label, & { color: gtkalpha(white, 0.8); }
      background: gtk("@warning_color_backdrop");
    }
    
    button {
      // FIXME: extend selection mode buttons
      @include button(normalib, transparent, white, none);
      color: white;

      &:hover { @include button(hoverib, transparent, white, none); }

      &:active,
      &:checked { @include button(activeib,transparent, white, none); }

      &:disabled { @include button(insensitiveib, transparent, white, none); }

      &:backdrop {
        @include button(backdropib, transparent, gtkalpha(white, 0.8), none);

        &:disabled {
          @include button(backdropinsensitiveib, transparent, gtkalpha(white, 0.8), none);
        }
      }
    }
  }
  &.error {
    color: white;
    label, & { color: white; }
    background: gtk("@error_color") linear-gradient(to bottom, rgba(0, 0, 0, 0.11), rgba(0, 0, 0, 0.16));
        
    &:backdrop {
      color: gtkalpha(white, 0.8);
      label, & { color: gtkalpha(white, 0.8); }
      background: gtk("@error_color_backdrop");
    }
    
    button {
      // FIXME: extend selection mode buttons
      @include button(normalib, transparent, white, none);
      color: white;

      &:hover { @include button(hoverib, transparent, white, none); }

      &:active,
      &:checked { @include button(activeib,transparent, white, none); }

      &:disabled { @include button(insensitiveib, transparent, white, none); }

      &:backdrop {
        @include button(backdropib, transparent, gtkalpha(white, 0.8), none);

        &:disabled {
          @include button(backdropinsensitiveib, transparent, gtkalpha(white, 0.8), none);
        }
      }
    }
  }

  &.info,
  &.question,
  &.warning,
  &.error {
    border-bottom: 1px solid rgba(0,0,0,0.17);

    //text-shadow: none;

    //&:backdrop { text-shadow: none; }

    selection { background-color: gtk("@theme_fg_color"); color: gtk("@theme_bg_color"); }

    *:link { color: gtk("@link_color"); }
  }
}


/************
 * Tooltips *
 ************/
tooltip {
  &.background {
    // background-color needs to be set this way otherwise it gets drawn twice
    // see https://bugzilla.gnome.org/show_bug.cgi?id=736155 for details.
    background-color: gtkalpha(black, 0.8);
    background-clip: padding-box;
    border: 1px solid gtk("@tooltip_border"); // this suble border is meant to
                                              // not make the tooltip melt with
                                              // very dark backgrounds
  }

  padding: 4px; /* not working */
  border-radius: 4px;
  box-shadow: none; // otherwise it gets inherited by windowframe.csd
  text-shadow: 0 1px black;

  // FIXME: we need a border or tooltips vanish on black background.
  decoration { background-color: transparent; }

  * { // Yeah this is ugly
    padding: 4px;
    background-color: transparent;
    color: white;
  }
}


/*****************
 * Color Chooser *
 *****************/
colorswatch {
  // This widget is made of two boxes one on top of the other, the lower box is colorswatch {} the other one
  // is colorswatch overlay {}, colorswatch has the programmatically set background, so most of the style is
  // applied to the overlay box.

  &:drop(active), & { border-style: none; } // FIXME: implement a proper drop(active) state

  $_colorswatch_radius: 5px;

  // base color corners rounding
  // to avoid the artifacts caused by rounded corner anti-aliasing the base color
  // sports a bigger radius.
  // nth-child is needed by the custom color strip.

  &.top {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-top-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-top-right-radius: $_colorswatch_radius;
    }
  }

  &.bottom {
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-bottom-left-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.left,
  &:first-child:not(.top) {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-bottom-left-radius: $_colorswatch_radius;
    }
  }

  &.right,
  &:last-child:not(.bottom) {
    border-top-right-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-right-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.dark {
    outline-color: gtkalpha(white, 0.6);

    overlay {
      color: white;

      &:hover { border-color: gtkalpha(black, 0.8); }

      &:backdrop { color: gtkalpha(white, 0.5); }
    }
  }

  &.light {
    outline-color: gtkalpha(black, 0.6);

    overlay {
      color: black;

      &:hover { border-color: gtkalpha(black, 0.5); }

      &:backdrop { color: gtkalpha(black, 0.5); }
    }
  }

  &:drop(active) {
    box-shadow: none;

    &.light overlay {
      border-color: gtk("@theme_selected_bg_color");
      box-shadow: inset 0 0 0 1px gtk("@theme_selected_bg_color"),
                  inset 0 0 0 2px rgba(0,0,0,0.17);
    }

    &.dark overlay {
      border-color: gtk("@theme_selected_bg_color");
      box-shadow: inset 0 0 0 1px gtk("@theme_selected_bg_color"),
                  inset 0 0 0 2px rgba(0,0,0,0.17);
    }
  }

  overlay {
    border: 1px solid rgba(0,0,0,0.3);

    &:hover {
      box-shadow: inset 0 1px gtkalpha(white, 0.4),
                  inset 0 -1px gtkalpha(black, 0.2);
    }

    &:backdrop, &:backdrop:hover {
      border-color: gtkalpha(black, 0.3);
      box-shadow: none;
    }
  }

  &#add-color-button {
    border-radius: $_colorswatch_radius $_colorswatch_radius 0 0;

    &:only-child { border-radius: $_colorswatch_radius; }

    overlay {
      @include button(normal);

      &:hover { @include button(hover); }

      &:backdrop { @include button(backdrop); }
    }
  }

  &:disabled {
    opacity: 0.5;

    overlay {
      border-color: gtkalpha(black, 0.6);
      box-shadow: none;
    }
  }

  row:selected & { box-shadow: 0 0 0 2px gtk("@theme_selected_fg_color"); }

  &#editor-color-sample {
    border-radius: 4px;

    overlay { border-radius: 4.5px; }
  }
}

// colorscale popup
colorchooser .popover.osd { border-radius: 4px; }

/********
 * Misc *
 ********/
//content view (grid/list)
.content-view {
  background-color: gtkdarken(gtk("@theme_bg_color"),7%);

  &:hover { -gtk-icon-effect: highlight; }

  &:backdrop { background-color: gtkdarken(gtk("@theme_bg_color"),7%); }

  rubberband, .rubberband { @extend rubberband; }
}

.scale-popup {
  .osd & { @extend %osd; }

  .osd & button.flat {  //FIXME: quick hack, redo properly
    border-style: none;
    border-radius: 4px;
  }

  button { // +/- buttons on GtkVolumeButton popup
    &:hover {
      @extend %undecorated_button;
      background-color: gtkalpha(gtk("@theme_fg_color"),0.1);
      border-radius: 4px;
    }

    &:backdrop { &:hover, &:disabled, & { @extend %undecorated_button; }}
  }
}

.nemo-window .primary-toolbar {
    box-shadow: inset 0 -1px rgba(0,0,0,0.17);
    &:backdrop {
        box-shadow: inset 0 -1px rgba(0,0,0,0.17);
    }
}


/**********************
 * Window Decorations *
 *********************/
decoration {
  border-radius: $window_radius $window_radius 0 0;
  // lamefun trick to get rounded borders regardless of CSD use
  border-width: 0px;

  // this needs to be transparent
  // see bug #722563
  $_wm_border: gtkalpha(black, 0.15);
  $_wm_border_backdrop: gtkalpha(black, 0.18);

  box-shadow: 0 7px 13px 0px gtkalpha(black, 0.4);
              //0 0 0 1px $_wm_border; //doing borders with box-shadow

  // FIXME rationalize shadows

  // this is used for the resize cursor area
  margin: 10px;

  &:backdrop {
    // the transparent shadow here is to enforce that the shadow extents don't
    // change when we go to backdrop, to prevent jumping windows.
    // The biggest shadow should be in the same order then in the active state
    // or the jumping will happen during the transition.
    box-shadow: 0 7px 13px 0px transparent,
                0 7px 13px 0px gtkalpha(black, 0.4);
    transition: $backdrop_transition;
  }

  .maximized &,
  .fullscreen &,
  .tiled &,
  .tiled-top &,
  .tiled-right &,
  .tiled-bottom &,
  .tiled-left & { border-radius: 0; }

  .popup & { box-shadow: none; }

  // server-side decorations as used by mutter
  .ssd & { box-shadow: 0 0 0 1px $_wm_border; } //just doing borders, wm draws actual shadows

  .csd.popup & {
    border-radius: $menu_radius;
    box-shadow: 0 1px 2px gtkalpha(black, 0.2),
                0 0 0 1px gtkalpha($_wm_border, 0.9);
  }

  tooltip.csd & {
    border-radius: 4px;
    box-shadow: none;
  }

  messagedialog.csd & {
    border-radius: $window_radius;
    box-shadow: 0 1px 2px gtkalpha(black, 0.2),
                0 0 0 1px gtkalpha($_wm_border, 0.9);
  }

  .solid-csd & {
    margin: 0;
    padding: 0px; //was 4px
    background-color: rgba(0,0,0,0.17);
    border: solid 1px rgba(0,0,0,0.17);
    border-radius: 0;
    //box-shadow: inset 0 0 0 3px $headerbar_color, inset 0 1px $top_hilight;

    &:backdrop { box-shadow: inset 0 0 0 3px gtk("@theme_unfocused_bg_color"); }
  }
}

// Window Close button
button.titlebutton {
/*  @extend %button_basic;

  @extend %button_basic.flat;*/
  
  min-width: 36px;
  min-height: 30px;
  padding: 0;
  margin: 0;
  border-radius: 0;
  border-width: 0;
  border-color: transparent;
  margin-right: -3.5px;
  margin-left: -3.5px;
  background-image: none;
  background-color: transparent;
  color: gtk("@theme_titlebar_foreground");
  background-position: center;
  background-repeat: no-repeat;

/*  &:not(.appmenu) {
    border-radius: 9999px;
    padding: $_hb_btn_pad;
    margin: 0 2px;
    min-width: 0;
    min-height: 0;
  }*/

  .selection-mode & {
    @extend %button.flat.suggested-action;

    @extend %nobg_selected_items;
  }

  //&:backdrop { -gtk-icon-shadow: none; }
}

/*.selection-mode headerbar button.titlebutton,
.selection-mode .titlebar button.titlebutton,
headerbar.selection-mode button.titlebutton,
.titlebar.selection-mode button.titlebutton {
  &:backdrop { -gtk-icon-shadow: none; }
}*/

  headerbar button.titlebutton:hover,
  .titlebar .button.titlebutton:hover {
    box-shadow: none;
    border-color: transparent;
    background-color: gtkalpha(gtk("@theme_titlebar_foreground"), 0.1); }
  headerbar button.titlebutton:active, headerbar button.titlebutton:checked,
  .titlebar .button.titlebutton:active,
  .titlebar .button.titlebutton:checked {
    border-color: transparent;
    background-color: gtkalpha(gtk("@theme_titlebar_foreground"), 0.2);
    color: gtk("@theme_titlebar_foreground");
    box-shadow: none; }
  headerbar button.titlebutton:backdrop, .titlebar .button.titlebutton:backdrop {
    color: gtk("@theme_titlebar_foreground_backdrop");
  }

headerbar button.titlebutton.close, .titlebar button.titlebutton.close, headerbar button.titlebutton.maximize, .titlebar button.titlebutton.maximize, headerbar button.titlebutton.minimize, .titlebar button.titlebutton.minimize, headerbar button.titlebutton.restore, .titlebar button.titlebutton.restore {
    opacity: 1;
    background-size: 18px 18px;
    -gtk-icon-source: none;
    image {
        color: transparent;
    }
}

headerbar button.titlebutton.close:backdrop, .titlebar button.titlebutton.close:backdrop, headerbar button.titlebutton.maximize:backdrop, .titlebar button.titlebutton.maximize:backdrop, headerbar button.titlebutton.minimize:backdrop, .titlebar button.titlebutton.minimize:backdrop, headerbar button.titlebutton.restore:backdrop, .titlebar button.titlebutton.restore:backdrop {
  opacity: 1;
}

headerbar button.titlebutton.close, .titlebar button.titlebutton.close {
    //background-color: transparent;
    background-image: -gtk-recolor(url('assets/close-icon-symbolic.svg'), color gtk("@theme_titlebar_foreground"));
    -gtk-icon-source: none;
    image {
        color: transparent;
    }
}

headerbar button.titlebutton.close:backdrop, .titlebar button.titlebutton.close:backdrop {
    //background-color: transparent;
    background-image: -gtk-recolor(url('assets/close-icon-symbolic.svg'), color gtk("@theme_titlebar_foreground_backdrop"));
}

headerbar button.titlebutton.close:hover, .titlebar button.titlebutton.close:hover {
    color: white;
    background-color: #ff5555;
    background-image: -gtk-recolor(url('assets/close-icon-symbolic.svg'));
}

headerbar button.titlebutton.close:active, .titlebar button.titlebutton.close:active {
    color: white;
    background-color: #c83737;
    background-image: -gtk-recolor(url('assets/close-icon-symbolic.svg'));
}

headerbar button.titlebutton.maximize, .titlebar button.titlebutton.maximize {
    background-image: -gtk-recolor(url('assets/max-icon-symbolic.svg'));
    -gtk-icon-source: none;
    image {
        color: transparent;
    }
}

headerbar button.titlebutton.maximize:backdrop, .titlebar button.titlebutton.maximize:backdrop {
    background-image: -gtk-recolor(url('assets/max-icon-symbolic.svg'));
}

headerbar button.titlebutton.maximize:hover, .titlebar button.titlebutton.maximize:hover {
    background-image: -gtk-recolor(url('assets/max-icon-symbolic.svg'));
}

headerbar button.titlebutton.maximize:active, .titlebar button.titlebutton.maximize:active {
    background-image: -gtk-recolor(url('assets/max-icon-symbolic.svg'));
}

headerbar button.titlebutton.minimize, .titlebar button.titlebutton.minimize {
    background-image: -gtk-recolor(url('assets/min-icon-symbolic.svg'));
    -gtk-icon-source: none;
    image {
        color: transparent;
    }
}

headerbar button.titlebutton.minimize:backdrop, .titlebar button.titlebutton.minimize:backdrop {
    background-image: -gtk-recolor(url('assets/min-icon-symbolic.svg'));
}

headerbar button.titlebutton.minimize:hover, .titlebar button.titlebutton.minimize:hover {
    background-image: -gtk-recolor(url('assets/min-icon-symbolic.svg'));
}

headerbar button.titlebutton.minimize:active, .titlebar button.titlebutton.minimize:active {
    background-image: -gtk-recolor(url('assets/min-icon-symbolic.svg'));
}

headerbar button.titlebutton.restore, .titlebar button.titlebutton.restore {
    background-image: -gtk-recolor(url('assets/rest-icon-symbolic.svg'));
    -gtk-icon-source: none;
    image {
        color: transparent;
    }
}

headerbar button.titlebutton.restore:backdrop, .titlebar button.titlebutton.restore:backdrop {
    background-image: -gtk-recolor(url('assets/rest-icon-symbolic.svg'));
}

headerbar button.titlebutton.restore:hover, .titlebar button.titlebutton.restore:hover {
    background-image: -gtk-recolor(url('assets/rest-icon-symbolic.svg'));
}

headerbar button.titlebutton.restore:active, .titlebar button.titlebutton.restore:active {
    background-image: -gtk-recolor(url('assets/rest-icon-symbolic.svg'));
}

.maximized headerbar button.titlebutton.maximize, .maximized .titlebar button.titlebutton.maximize,
.maximized headerbar button.titlebutton.maximize,
.maximized .titlebar button.titlebutton.maximize {
    background-image: -gtk-recolor(url('assets/rest-icon-symbolic.svg'));
}

.maximized headerbar button.titlebutton.maximize:backdrop, .maximized .titlebar button.titlebutton.maximize:backdrop,
.maximized headerbar button.titlebutton.maximize:backdrop,
.maximized .titlebar button.titlebutton.maximize:backdrop {
    background-image: -gtk-recolor(url('assets/rest-icon-symbolic.svg'));
}

.maximized headerbar button.titlebutton.maximize:hover, .maximized .titlebar button.titlebutton.maximize:hover,
.maximized headerbar button.titlebutton.maximize:hover,
.maximized .titlebar button.titlebutton.maximize:hover {
    background-image: -gtk-recolor(url('assets/rest-icon-symbolic.svg'));
}

.maximized headerbar button.titlebutton.maximize:active, .maximized .titlebar button.titlebutton.maximize:active,
.maximized headerbar button.titlebutton.maximize:active,
.maximized .titlebar button.titlebutton.maximize:active {
    background-image: -gtk-recolor(url('assets/rest-icon-symbolic.svg'));
}

// catch all extend :)

%selected_items {
  background-color: gtk("@theme_selected_bg_color");

  @at-root %nobg_selected_items, & {
    color: gtk("@theme_selected_fg_color");

    &:disabled { color: gtkmix(gtk("@theme_selected_fg_color"), gtk("@theme_selected_bg_color"), 50%); }

    &:backdrop {
      color: gtkalpha(gtk("@theme_selected_fg_color"), 0.8);

      &:disabled { color: gtkmix(gtkalpha(gtk("@theme_selected_fg_color"), 0.8), gtk("@theme_selected_bg_color"), 30%); }
    }
  }
}

.monospace { font-family: monospace; }


/**********************
 * Touch Copy & Paste *
 *********************/
//touch selection handlebars for the Popover.osd above
cursor-handle {
  background-color: transparent;
  background-image: none;
  box-shadow: none;
  border-style: none;

  @each $s,$as in ('',''),
                  (':hover','-hover'),
                  (':active','-active') { //no need for insensitive and backdrop
    &.top#{$s}:dir(ltr), &.bottom#{$s}:dir(rtl) {
      $_url: 'assets/text-select-start#{$as}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
      padding-left: 10px;
    }

    &.bottom#{$s}:dir(ltr), &.top#{$s}:dir(rtl) {
      $_url: 'assets/text-select-end#{$as}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
      padding-right: 10px;
    }

    &.insertion-cursor#{$s}:dir(ltr), &.insertion-cursor#{$s}:dir(rtl) {
      $_url: 'assets/slider-horz-scale-has-marks-above#{$as}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
    }
  }
}

.context-menu { font: initial; } // Decouple the font of context menus from their entry/textview

// shortcut window keys
.keycap {
  min-width: 20px;
  min-height: 25px;
  margin-top: 2px;
  padding-bottom: 3px;
  padding-left: 6px;
  padding-right: 6px;

  color: gtk("@theme_fg_color");
  background-color: gtk("@theme_base_color");
  border: 1px solid;
  border-color: gtk("@theme_bg_color") rgba(0,0,0,0.85);
  border-radius: 5px;
  box-shadow: inset 0 -3px gtkmix(gtk("@theme_base_color"), gtk("@theme_bg_color"), 20%);
  font-size: smaller;

  &:backdrop {
    background-color: gtk("@theme_unfocused_base_color");
    color: gtk("@theme_unfocused_fg_color");
    transition: $backdrop_transition;
  }
}

:not(decoration):not(window):drop(active):focus,
:not(decoration):not(window):drop(active) { // FIXME needs to be done widget by widget, this wildcard should really die
  border-color: gtk("@theme_selected_bg_color");
  box-shadow: inset 0 0 0 1px gtk("@theme_selected_bg_color");
  caret-color: gtk("@theme_selected_bg_color");
}

stackswitcher button.text-button { min-width: 100px; } // FIXME aggregate with buttons

stackswitcher button.circular,
stackswitcher button.text-button.circular { // FIXME aggregate with buttons
  min-width: 32px;
  min-height: 32px;
  padding: 0;
}

/*************
 * App Icons *
 *************/
/* Outline for low res icons */
.lowres-icon {
    -gtk-icon-shadow: 0 -1px rgba(0,0,0,0.05),
      1px 0 rgba(0,0,0,0.1),
      0 1px rgba(0,0,0,0.3),
      -1px 0 rgba(0,0,0,0.1);
}

/* Dropshadow for large icons */
.icon-dropshadow {
  -gtk-icon-shadow: 0 1px 12px rgba(0,0,0,0.05),
      0 -1px rgba(0,0,0,0.05),
      1px 0 rgba(0,0,0,0.1),
      0 1px rgba(0,0,0,0.3),
      -1px 0 rgba(0,0,0,0.1);
}

/*********
 * Emoji *
 ********/

popover.emoji-picker { padding-left: 0; padding-right: 0; }

button.emoji-section {
  border-color: transparent;
  border-width: 3px;
  border-style: none none solid;
  border-radius: 0;

  margin: 2px 4px 2px 4px;
  padding: 3px 0 0;
  min-width: 32px;
  min-height: 28px;

  /* reset props inherited from the button style */
  background: none;
  box-shadow: none;
  text-shadow: none;

  outline-offset: -5px;

  &:backdrop:not(:checked) { border-color: transparent; }
  &:hover { border-color: rgba(0,0,0,0.17); }
  &:checked { border-color: gtk("@theme_selected_bg_color"); }

  label {
    padding: 0;

    opacity: 0.55;
  }

  &:hover label { opacity: 0.775; }
  &:checked label { opacity: 1; }
}

popover.emoji-picker .emoji {
  font-size: x-large;
  padding: 6px;
  border-radius: 6px;

  :hover {
    background: gtk("@theme_selected_bg_color");
  }
}

popover.emoji-completion arrow {
  border: none;
  background: none;
}

popover.emoji-completion contents row box {
  padding: 2px 10px;
}

popover.emoji-completion .emoji:hover {
  background-color: gtk("@theme_selected_bg_color");
  color: gtk("@theme_selected_fg_color");
}


/**************
 * Statusbars *
 *************/

statusbar > frame > border {
  border: none;
}

.pluma-window statusbar frame > border {
  border: none;
}

.gedit-side-panel-paned statusbar {
  border-top: 1px solid #dcdfe3;
  background-color: #F1F0EF;
}
